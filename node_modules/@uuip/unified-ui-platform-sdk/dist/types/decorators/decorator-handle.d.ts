import { Err } from "../err/err";
type ErrMessageContext<T> = Err.Message & {
    ctx: T;
};
type ErrDetailsContext<T, TD extends Err.IdsDetails> = Err.Details<TD> & {
    ctx: T;
};
type Handler<T> = (this: T, err: ErrMessageContext<T>) => Promise<void> | void;
type HandlerDetails<T, TDetails extends Err.IdsDetails> = (this: T, err: ErrDetailsContext<T, TDetails>) => Promise<void> | void;
type Handlers<T> = {
    [k in Err.Id]?: k extends Err.IdsDetails ? HandlerDetails<T, k> : Handler<T>;
};
export declare function Handle<T = any>(handlers: Handler<T> | Handlers<T>): (target: any, key: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
export {};
