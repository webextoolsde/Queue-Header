export declare namespace Err {
    export interface Ids {
    }
    export type Id = IdsMessage | IdsDetails;
    export class Message extends Error {
        readonly id: Id;
        constructor(id: IdsMessage);
        constructor(id: IdsMessage, message: string);
        constructor(id: IdsMessage, errror: Error);
        private isErr;
    }
    export class Details<T extends IdsDetails> extends Error {
        readonly id: Id;
        readonly details: IdsDetailsType[T];
        constructor(id: T, details: IdsDetailsType[T]);
        private isErr;
    }
    type IdsGlobal = "system" | "handle" | "fallback";
    type IdsSub = Ids[keyof Ids];
    export type IdsMessage = IdsGlobal | keyof Ids | Exclude<IdsSub, object>;
    export type IdsDetails = keyof IdsDetailsType;
    export type IdsDetailsType = FlattenUnion<Exclude<IdsSub, string>>;
    type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
    type FlattenUnion<T> = {
        [K in keyof UnionToIntersection<T>]: K extends keyof T ? T[K] extends any[] ? T[K] : T[K] extends object ? FlattenUnion<T[K]> : T[K] : UnionToIntersection<T>[K];
    };
    export {};
}
