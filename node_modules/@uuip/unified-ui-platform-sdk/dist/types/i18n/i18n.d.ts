import * as I18Next from "i18next";
import Backend from "i18next-http-backend";
import LanguageDetector from "i18next-browser-languagedetector";
export declare namespace I18N {
    export type TFunc = ReturnType<typeof I18N.createService>["t"];
    export type TFuncParams = Parameters<ReturnType<typeof I18N.createService>["t"]>;
    export type InitOptions = I18Next.InitOptions;
    export type CreateServiceOptions = {
        logger?: Pick<I18Next.LoggerModule, "log" | "warn" | "error"> | ({
            info: (...args: Parameters<I18Next.LoggerModule["log"]>) => ReturnType<I18Next.LoggerModule["log"]>;
        } & Pick<I18Next.LoggerModule, "warn" | "error">);
        backend?: Backend;
        languageDetector?: LanguageDetector;
    };
    export const createService: (createServiceOptions?: CreateServiceOptions) => I18Next.i18n;
    export const mergeServiceInitOptions: (...initOptions: I18Next.InitOptions[]) => I18Next.InitOptions;
    type Constructor<T = {}> = new (...args: any[]) => T;
    export interface UpdatingElement {
        connectedCallback(): void;
        disconnectedCallback(): void;
        requestUpdate(name?: PropertyKey, oldValue?: unknown): Promise<unknown>;
    }
    export interface I18nElement {
        t: I18N.TFunc;
    }
    export type CreateMixinOptions = {
        i18n: ReturnType<typeof I18N.createService>;
    } | {
        i18nInitOptions: I18N.InitOptions;
    };
    export const createMixin: (createMixinOptions: CreateMixinOptions) => <T extends Constructor<HTMLElement & UpdatingElement>>(baseElement: T) => T & Constructor<I18nElement>;
    export {};
}
