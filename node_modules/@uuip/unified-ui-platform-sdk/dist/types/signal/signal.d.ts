export declare namespace Signal {
    type Listener<T> = (data: T) => void;
    type ListenerEmpty = () => void;
    export type Send<T> = (data: T) => void;
    export type SendEmpty = () => void;
    export interface WithData<T> {
        listen: (listener: Listener<T>) => {
            stopListen: () => boolean;
        };
        listenOnce: (listener: Listener<T>) => {
            stopListenOnce: () => boolean;
        };
        stopListen: (listener: Listener<T>) => boolean;
        stopListenOnce: (listener: Listener<T>) => boolean;
    }
    export interface Empty {
        listen: (listener: ListenerEmpty) => {
            stopListen: () => boolean;
        };
        listenOnce: (listener: ListenerEmpty) => {
            stopListenOnce: () => boolean;
        };
        stopListen: (listener: ListenerEmpty) => boolean;
        stopListenOnce: (listener: ListenerEmpty) => boolean;
    }
    type Return<T> = {
        signal: WithData<T>;
        send: (data: T) => void;
        stopListenAll: () => void;
    };
    type ReturnEmpty = {
        signal: Empty;
        send: () => void;
        stopListenAll: () => void;
    };
    class Create {
        withData<T>(): Return<T>;
        empty(): ReturnEmpty;
    }
    export const create: Create;
    export {};
}
