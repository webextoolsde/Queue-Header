export declare const worker = "(()=>{\"use strict\";\nconst e=new Map,t=new Map,r=(e,t)=>\n{let r,o;const i=performance.now();r=i,o=e-Math.max(0,i-t);\n    return{expected:r+o,remainingDelay:o}},\n    o=(e,t,r,i)=>{const s=performance.now();\n        s>r?postMessage({id:null,method:\"call\",params:{timerId:t,timerType:i}}):e.set(t,setTimeout(o,r-s,e,t,r,i))};\n        addEventListener(\"message\",(i=>{let{data:s}=i;try{if(\"clear\"===s.method){const{id:r,params:{timerId:o,timerType:i}}=s;\n        if(\"interval\"===i)\n        (t=>{const r=e.get(t);\n        if(void 0===r)\n        throw new Error('There is no interval scheduled with the given id \"'.concat(t,'\".'));\n        clearTimeout(r),e.delete(t)})(o),postMessage({error:null,id:r});\n        else{if(\"timeout\"!==i)\n        throw new Error('The given type \"'.concat(i,'\" is not supported'));\n        (e=>{const r=t.get(e);if(void 0===r)\n        throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));\n        clearTimeout(r),t.delete(e)})(o),postMessage({error:null,id:r})}}\n        else{if(\"set\"!==s.method)\n        throw new Error('The given method \"'.concat(s.method,'\" is not supported'));\n        {const{params:{delay:i,now:n,timerId:a,timerType:d}}=s;\n        if(\"interval\"===d)\n        ((t,i,s)=>{const{expected:n,remainingDelay:a}=r(t,s);\n        e.set(i,setTimeout(o,a,e,i,n,\"interval\"))})(i,a,n);\n        else{if(\"timeout\"!==d)\n        throw new Error('The given type \"'.concat(d,'\" is not supported'));\n        ((e,i,s)=>{const{expected:n,remainingDelay:a}=r(e,s);\n        t.set(i,setTimeout(o,a,t,i,n,\"timeout\"))})(i,a,n)}}}}catch(e){postMessage({error:{message:e.message},id:s.id,result:null})}}))})();";
