import { OAuth } from "@uuip/unified-ui-platform";
import { LitElement } from "lit-element";
import "./src/actions-channels-sandbox";
import "./src/cms-sandbox";
import "./src/featureFlag-sandbox";
import "./src/shortcutkey-sandbox";
export declare class Sandbox extends LitElement {
    private isAuthorized;
    private isLoggedIn;
    private contacts;
    private txt;
    token: OAuth.Token;
    auth: OAuth.Service;
    timeout: (ms: number) => Promise<unknown>;
    static get styles(): import("lit-element").CSSResult;
    connectedCallback(): void;
    logout(): Promise<void>;
    consultConference(): Promise<void>;
    consultConferenceEnd(): Promise<void>;
    contactHistory(): Promise<void>;
    contactHistoryAgent(): Promise<void>;
    email(): Promise<void>;
    emailSend(): Promise<void>;
    buddyAgents(): Promise<void>;
    vteamList(): Promise<void>;
    hold(): Promise<void>;
    unhold(): Promise<void>;
    pauseRecording(): Promise<void>;
    resumeRecording(): Promise<void>;
    consult(): Promise<void>;
    consultEnd(): Promise<void>;
    startConsultAgent(): Promise<void>;
    endConsultAgent(): Promise<void>;
    startConsultDN(): Promise<void>;
    endConsultDN(): Promise<void>;
    vteamTransfer(): Promise<void>;
    blindTransfer(): Promise<void>;
    updateCadVariables(): Promise<void>;
    consultTransfer(): Promise<void>;
    init(): Promise<void>;
    loginFlow(): Promise<void>;
    private listenContacts;
    acceptContact(interactionId: string): Promise<void>;
    render(): import("lit-element").TemplateResult;
}
//# sourceMappingURL=sandbox.d.ts.map