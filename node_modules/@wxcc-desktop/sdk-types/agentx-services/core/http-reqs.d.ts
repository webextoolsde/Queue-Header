import { Err as UUIPErr } from "@uuip/unified-ui-platform-sdk";
import { AxiosError, Method } from "axios";
export declare class HttpReqs {
    private readonly host;
    private readonly removeDefaultHeader;
    private readonly auth;
    constructor(host: string, removeDefaultHeader?: boolean);
    req<TRes, TReq>(c: Conf<TRes, TReq>): Res<TRes, TReq>;
    reqEmpty<TRes>(c: ConfEmpty<TRes>): ResEmpty<TRes>;
    reqEmptyWithoutAuth<TRes>(c: ConfEmpty<TRes>): ResEmpty<TRes>;
    private fetchNewToken;
    private makeAPIRequest;
    private createPromise;
}
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.http.reqs": ReqError;
        }
    }
}
type ReqError = "Service.http.reqs.GenericRequestError" | {
    "Service.http.reqs.Timeout": {
        key: string;
    };
};
type Req<TRes> = {
    url: string;
    res: TRes;
    err?: ((errObj: AxiosError<any>) => UUIPErr.Details<"Service.reqs.generic.failure">) | UUIPErr.IdsMessage | ((e: AxiosError) => UUIPErr.Message | UUIPErr.Details<UUIPErr.IdsDetails>);
    errId?: string;
    data?: any;
    headers?: Record<string, string>;
    method?: Method;
    responseType?: respType;
    timeout?: Timeout;
};
type respType = "arraybuffer" | "stream" | "blob" | "json" | "document" | "text";
type Conf<TRes, TReq> = (p: TReq) => Req<TRes>;
type ConfEmpty<TRes> = () => Req<TRes>;
type Res<TRes, TReq> = (p: TReq, cb?: CbRes<TRes>) => Promise<TRes>;
type ResEmpty<TRes> = (cb?: CbRes<TRes>) => Promise<TRes>;
type CbRes<TRes> = (res: any) => void | TRes;
type Timeout = number | "disabled";
export {};
//# sourceMappingURL=http-reqs.d.ts.map