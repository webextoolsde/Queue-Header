import { OAuth } from "@uuip/unified-ui-platform";
import { AgentxServicesConfig } from "./config";
import { AgentxServices } from "./services/services";
export { FEATURE_FLAGS } from "./feature-flag-names";
export { AgentPerformanceTypes } from "./services/agent-performance/agent-performance-types";
export * from "./services/agent/index";
export { buildInfoService } from "./services/build-info/build-info-service";
export { CMSTypes } from "./services/cms/cms-types";
export * from "./services/interactions/index";
export { RTDTypes } from "./services/rtd-types/rtd-types";
export * from "./services/tasks/index";
export * as TrackingUtils from "./services/telemetry/tracking-utils";
export * as WebexCallingUtils from "./services/webex/webex-calling-utils";
export { StructuredLog } from "./utils/structuredLog";
export { AgentxServices };
/**
 * Through SERVICE a developer is able to acess all AQM calls and subscribe to applicable Notifs responses.
 * Currently includes: `aqm` service
 */
export declare const SERVICE: AgentxService;
/**
 * Service namespace allows a developer to access typings for AQM requests, Notifs responses, as well as payload parameters.
 */
export declare namespace Service {
}
export type AgentxService = Omit<{
    readonly [k in keyof AgentxServices]: AgentxServices[k];
}, "init">;
export declare function initAgentxServices(config: AgentxServicesConfig, accessToken: string, authService?: OAuth.Service): Promise<void>;
export declare function updateAccessToken(accessToken: string): void;
/**
 * Return Tracking ID from Error Object
 * @param errorObj
 * @returns Tracking ID
 */
export declare const getTrackingIdFromErrorObject: (errorObj: any) => any;
/**
 * Return Masked string with PII removed
 * @param value
 * @returns Masked string
 */
export declare const maskSensitiveData: (value: string) => string;
/**
 * Gets rolename and forms it as per required display on Telemetry
 * @param roleName
 * @returns
 */
export declare const formRoleNameForTelemetry: (roleName: string) => string;
export declare const getRoutingHost: () => string;
//# sourceMappingURL=index.d.ts.map