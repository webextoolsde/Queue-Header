import EventEmitter from "event-emitter";
import { Service } from "../../index";
declare class ActionChannelSource<A extends string, P extends unknown[]> {
    private readonly emitter;
    private readonly getSourcesCount;
    private readonly getDestinationsCount;
    private readonly options;
    private lastTimeoutRef;
    private last;
    private throttledDelayMs;
    private throttledDropCount;
    private initOptions;
    private createSourceMeta;
    constructor(config: {
        actionName: A;
        inject: {
            emitter: EventEmitter.Emitter;
            getSourcesCount: () => number;
            getDestinationsCount: () => number;
        };
        options?: Service.ActionChannel.SourceOptions;
    });
    readonly actionName: A;
    send(...args: P): void;
}
declare class ActionChannelDestination<A extends string, P extends unknown[]> {
    private readonly emitter;
    private readonly listenersSet;
    private readonly options;
    private initOptions;
    constructor(config: {
        actionName: A;
        inject: {
            emitter: EventEmitter.Emitter;
        };
        options?: Service.ActionChannel.DestinationOptions;
    });
    readonly actionName: A;
    get listenersCount(): number;
    addListener(listener: Service.ActionChannel.Listener<P>): void;
    removeListener(listener: Service.ActionChannel.Listener<P>): void;
    removeAllListeners(): void;
}
export declare class ActionsChannelsService {
    private readonly channelsSources;
    private readonly channelsDestinations;
    private readonly emitter;
    private getChannelsCount;
    getSourceChannelsCount(actionName: string): number;
    getDestinationChannelsCount(actionName: string): number;
    createSource<A extends string, P extends unknown[]>(actionName: A, options?: Service.ActionChannel.SourceOptions): ActionChannelSource<A, P>;
    createDestination<A extends string, P extends unknown[]>(actionName: A, options?: Service.ActionChannel.DestinationOptions): ActionChannelDestination<A, P>;
}
declare module "../../index" {
    namespace Service.ActionChannel {
        type SourceMeta = {
            argsCount: number;
            sourcesCount: number;
            destinationsCount: number;
            sourceTag?: string;
            throttledDelayMs?: number;
            throttledDropCount?: number;
        };
        type ListenerPayload<P extends unknown[]> = {
            args: P;
            meta: SourceMeta;
        };
        type Listener<P extends unknown[]> = P extends Parameters<EventEmitter.EventListener> ? (p: ListenerPayload<P>) => void : never;
        type SourceOptions = {
            rps?: number;
            tag?: string;
        };
        type DestinationOptions = {
            tag?: string;
        };
    }
}
export {};
//# sourceMappingURL=actions-channels-service.d.ts.map