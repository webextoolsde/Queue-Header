import { AgentPerformanceTypes } from "./agent-performance-types";
export type DataFetcherValueKeyValueType = {
    [key: string]: DataFetcherValueType;
};
export type DataFetcherDurationValueType = {
    duration: number;
    isActive?: boolean;
    createdTime?: number;
};
export type DataFetcherRelationshipValueType = {
    column: string;
    comparisonColumn: string;
    isAnomaly: boolean;
};
export type DataFetcherPercentageValueType = {
    ratio?: number;
};
export type DataFetcherValueType = string | number | boolean | DataFetcherValueKeyValueType[] | DataFetcherDurationValueType | DataFetcherPercentageValueType | DataFetcherRelationshipValueType[] | null | undefined;
export declare class DataFetcher {
    fetchPerformanceData(startTime: number, endTime: number, columns?: AgentPerformanceTypes.DataFetcherTypes.ColumnName[]): Promise<AgentPerformanceTypes.DataFetcherTypes.Table>;
    private processAgentEvalScore;
    private getPercentageObject;
    private processSessions;
    private computeAnomalies;
    private computeAverage;
    private computeAverageHandleTime;
    private processTeamSessions;
    private getTeamPerformanceData;
    private getAggregationValue;
    private getAggregationValueUsingServiceColumn;
    private getAgentPerformanceData;
    private getEvaluationScoreData;
    private columnNamesToServiceColumns;
    private isTeamAvgColumn;
    private isEvaluationScoreColumn;
    private isDurationColumn;
    private readonly requiredAgentColumns;
    private readonly requiredTeamColumn;
    private readonly forbiddenTeamColumns;
}
//# sourceMappingURL=DataFetcher.d.ts.map