import { Service } from "../../index";
import { AgentPerformanceTypes } from "./agent-performance-types";
export declare class AgentPerformanceService {
    fetchPerformanceData(startTime: number, endTime: number, columns?: AgentPerformanceTypes.DataFetcherTypes.ColumnName[]): Promise<AgentPerformanceTypes.DataFetcherTypes.Table>;
    private readonly httpLocal;
    fetchEvaluationForm(params: {
        orgId: string;
        formId: string;
    }): Promise<AgentPerformanceTypes.FormDefinition>;
    fetchOrgEvaluationForms(params: {
        orgId: string;
    }): Promise<AgentPerformanceTypes.FetchOrgFormsResponse>;
    fetchAIAssistedEvaluations(params: {
        orgId: string;
        interactionId: string;
    }): Promise<AgentPerformanceTypes.AIAssistedEvaluationsResponse>;
    triggerAIEvaluation(params: {
        orgId: string;
        formId: string;
        interactionId: string;
        transcript: Service.QMW.TranscriptionJson;
        agent: AgentPerformanceTypes.AgentEvaluationDetails;
    }): Promise<{}>;
    saveEvaluationForm(params: {
        orgId: string;
        data: AgentPerformanceTypes.FormDefinition;
    }): Promise<AgentPerformanceTypes.FormDefinition>;
    updateEvaluationForm(params: {
        orgId: string;
        formId: string;
        data: AgentPerformanceTypes.FormDefinition;
    }): Promise<AgentPerformanceTypes.FormDefinition>;
    createEvaluation(params: {
        orgId: string;
        data: AgentPerformanceTypes.EvaluationDefinition;
    }): Promise<AgentPerformanceTypes.EvaluationDefinition>;
    deleteEvaluationForm(params: {
        orgId: string;
        formId: string;
    }): Promise<{}>;
    archiveEvaluationForm(params: {
        orgId: string;
        formId: string;
    }): Promise<{}>;
    publishEvaluationForm(params: {
        orgId: string;
        formId: string;
    }): Promise<AgentPerformanceTypes.FormDefinition>;
    fetchEvaluation(params: {
        interactionId: string;
        orgId: string;
    }): Promise<AgentPerformanceTypes.EvaluationDefinition>;
    saveEvaluation(params: {
        orgId: string;
        evaluationId: string;
        data: AgentPerformanceTypes.EvaluationDefinition;
    }): Promise<AgentPerformanceTypes.EvaluationDefinition>;
    publishEvaluation(params: {
        orgId: string;
        evaluationId: string;
        data: AgentPerformanceTypes.EvaluationDefinition;
    }): Promise<AgentPerformanceTypes.EvaluationDefinition>;
    archiveEvaluation(params: {
        orgId: string;
        evaluationId: string;
    }): Promise<{}>;
}
type ErrDetails = {
    trackingId: string;
    msg: string;
    statusCode: number;
    retryAfter: string;
};
export type agentPerformanceErrorIds = {
    "Service.agentPerformance.fetchAgentPerformanceData": ErrDetails;
    "Service.agentPerformance.fetchOrgEvaluationForms": ErrDetails;
    "Service.agentPerformance.fetchEvaluationForm": ErrDetails;
    "Service.agentPerformance.saveEvaluationForm": ErrDetails;
    "Service.agentPerformance.saveEvaluation": ErrDetails;
    "Service.agentPerformance.fetchAIAssistedEvaluations": ErrDetails;
    "Service.agentPerformance.updateEvaluationForm": ErrDetails;
    "Service.agentPerformance.publishEvaluationForm": ErrDetails;
    "Service.agentPerformance.deleteEvaluationForm": ErrDetails;
    "Service.agentPerformance.publishEvaluation": ErrDetails;
    "Service.agentPerformance.fetchEvaluation": ErrDetails;
    "Service.agentPerformance.createEvaluation": ErrDetails;
    "Service.agentPerformance.archiveEvaluation": ErrDetails;
    "Service.agentPerformance.archiveEvaluationForm": ErrDetails;
    "Service.agentPerformance.triggerAIEvaluation": ErrDetails;
    "Service.agentPerformance.agentPerformanceScores": ErrDetails;
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.agentPerformance": agentPerformanceErrorIds;
        }
    }
}
export {};
//# sourceMappingURL=agent-performance-service.d.ts.map