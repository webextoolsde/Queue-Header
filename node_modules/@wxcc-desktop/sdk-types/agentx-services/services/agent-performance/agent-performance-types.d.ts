import { DataFetcherValueType } from "./DataFetcher";
export declare namespace AgentPerformanceTypes {
    namespace DataFetcherTypes {
        enum ColumnName {
            AgentName = "agentName",
            AgentId = "agentId",
            AgentEmail = "agentEmail",
            TeamName = "teamName",
            TeamId = "teamId",
            SiteName = "siteName",
            SiteId = "siteId",
            ConnectedCount = "connectedCount",
            ConnectedDuration = "connectedDuration",
            ConsultRequestCount = "consultRequestCount",
            ConsultRequestDuration = "consultRequestDuration",
            ConsultAnswerCount = "consultAnswerCount",
            HoldCount = "holdCount",
            HoldDuration = "holdDuration",
            TransferCount = "transferCount",
            AverageHandleTime = "averageHandleTime",
            AverageEvaluationScore = "averageEvaluationScore",
            TeamAvgConnectedCount = "teamAvgConnectedCount",
            TeamAvgConnectedDuration = "teamAvgConnectedDuration",
            TeamAvgHoldCount = "teamAvgHoldCount",
            TeamAvgHoldDuration = "teamAvgHoldDuration",
            TeamAvgTransferCount = "teamAvgTransferCount",
            TeamAvgAverageHandleTime = "teamAvgAverageHandleTime",
            HoldCountPerCall = "holdCountPerCall",
            TransferCountPerCall = "transferCountPerCall",
            HoldDurationRatio = "holdDurationRatio",
            TeamAvgHoldCountPerCall = "teamAvgHoldCountPerCall",
            TeamAvgTransferCountPerCall = "teamAvgTransferCountPerCall",
            TeamAvgHoldDurationRatio = "teamAvgHoldDurationRatio",
            Anomalies = "anomalies",
            OutdialCount = "outdialCount",
            OutdialConnectedCount = "outdialConnectedCount",
            OutdialConnectedDuration = "outdialConnectedDuration",
            OutdialConsultRequestCount = "outdialConsultRequestCount",
            OutdialConsultRequestDuration = "outdialConsultRequestDuration",
            OutdialConsultAnswerCount = "outdialConsultAnswerCount",
            OutdialHoldCount = "outdialHoldCount",
            OutdialHoldDuration = "outdialHoldDuration",
            OutdialTransferCount = "outdialTransferCount"
        }
        type ColumnValue = {
            [key: string]: ColumnValueType;
        };
        type ColumnValueType = DataFetcherValueType;
        type Row = {
            [columnName: string]: AgentPerformanceTypes.DataFetcherTypes.ColumnValueType;
        };
        type Table = Row[];
    }
    type Question = {
        id: string;
        text: string;
        tooltipText: string | null;
        type: string;
        options: Option[];
        weight: number;
        autoFailThreshold?: number;
        selectedAnswer?: string;
        comment?: string;
        aiSuggestedAnswerJustification?: string;
        aiEvalDetails?: AIEvalDetails[];
    };
    type Section = {
        id: string;
        name: string;
        questions: Question[];
    };
    type Interaction = {
        interactionId: string;
        agent: {
            userId: string;
            ccUserId: string;
            displayName: string;
        };
    };
    type Option = {
        id?: number;
        text: string;
        weight: number;
        autoFail: boolean;
    };
    type Answer = {
        id?: string;
        questionId: string;
        comment?: string;
        selectedOptions: {
            id: number;
            text: string;
            weight: number;
        }[];
    };
    type EvaluationDefinition = {
        id?: string;
        interaction: Interaction;
        status: EvaluationStatus;
        formId: string;
        createdAt: string;
        lastModifiedAt: string;
        answers: Answer[];
        lastModifiedBy?: {
            userId: string;
            ccUserId: string;
            displayName: string;
        };
    };
    type AgentEvaluationDetails = {
        ccUserId: string;
        displayName: string;
    };
    type FormDefinition = {
        id: string;
        name: string;
        sections: Section[];
        status: string;
        description?: string;
    };
    type AIAssistedEvaluationsResponse = {
        interaction: {
            interactionId: string;
        };
        formId: string;
        suggestedAnswers: SuggestedAnswers[];
    };
    type SuggestedAnswers = {
        questionId: string;
        justification?: string;
        selectedOptions: AIEvalDetails[];
    };
    type AIEvalDetails = {
        id: number;
        text: string;
        weight: number;
        confidence?: number;
        detectionPoints?: AIDetectionPoint[];
    };
    type AIDetectionPoint = {
        startTimeMs: number;
        endTimeMs: number;
        text: string;
    };
    type FetchOrgFormsResponse = {
        data: FormDefinition[];
        meta?: {
            pageNumber: number;
            pageSize: number;
            totalRecords: number;
            totalPages: number;
        };
    };
    type AgentPerformanceInfo = {
        agentId: string;
        numberOfInteractions: number;
        evaluationAverageScore?: number;
    };
    type FetchAgentPerformanceScoresResponse = {
        agentPerformanceInfos: AgentPerformanceInfo[];
    };
    enum EvaluationMode {
        VIEW = "VIEW",
        EDIT = "EDIT",
        CREATE = "CREATE"
    }
    enum QuestionType {
        SINGLE_CHOICE = "SINGLE_CHOICE"
    }
    enum EvaluationStatus {
        ARCHIVED = "ARCHIVED",
        DRAFT = "DRAFT",
        ACTIVE = "ACTIVE",
        PUBLISHED = "PUBLISHED"
    }
    enum EvaluationMetricEvents {
        VIEWING_PUBLISHED_EVALUATION = "viewing-published-evaluation",
        RETRIEVE_EVALUATION_FORMS = "retrieve-evaluation-forms",
        RETRIEVE_EVALUATION_FORM = "retrieve-evaluation-form",
        RETRIEVE_EVALUATION = "retrieve-evaluation",
        SAVE_EVALUATION = "save-evaluation",
        PUBLISH_EVALUATION = "publish-evaluation",
        DISCARD_EVALUATION = "discard-evaluation",
        CREATE_EVALUATION = "create-evaluation",
        AI_ASSIST_SUGGESTIONS_UNAVAILABLE = "ai-assist-suggestions-unavailable",
        ERROR_RETRIEVING_AI_ASSIST_SUGGESTIONS = "error-retrieving-ai-assist-suggestions",
        AI_ASSIST_POLLING_MAX_RETRIES = "ai-assist-polling-max-retries",
        AI_ASSIST_POLLING_SUCCESS = "ai-assist-polling-success",
        AI_ASSIST_POLLING_FAILED = "ai-assist-polling-failed"
    }
}
//# sourceMappingURL=agent-performance-types.d.ts.map