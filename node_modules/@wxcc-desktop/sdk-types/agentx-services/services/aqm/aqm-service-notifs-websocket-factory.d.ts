export type MessageEventHandler = (event: MessageEvent) => void;
export type EventHandler = (event: any) => void;
export declare class NotifsWebsocket {
    private readonly websocket;
    private readonly closeRequestHandler;
    constructor(websocket: WebSocket, closeRequestHandler: (shouldReconnect: boolean, reason: string) => void);
    send(message: any): void;
    close(shouldReconnect: boolean, reason: string): void;
    onclose?: (this: NotifsWebsocket) => any;
    onmessage?: (this: NotifsWebsocket, message: any) => any;
}
export declare class NotifsWebsocketFactory {
    private readonly host;
    private readonly organizationId;
    private websocket?;
    private connectionTimeoutId?;
    private keepAliveFromServerTimeoutId?;
    private keepAliveFromDesktopInterval?;
    private accessToken;
    private autoResolveInsteadOfWelcomeMessageFlow;
    private readonly webSocketStatus;
    constructor(host: string, organizationId: string, accessToken: string);
    updateAccessToken(accessToken: string): void;
    private sendKeepAlive;
    createWebSocket(autoResolveInsteadOfWelcomeMessageFlow?: boolean): Promise<NotifsWebsocket>;
    private register;
    private connect;
    private closeRequestHandler;
    private buildEventName;
    private resetKeepAliveTimeout;
    private readonly logTrace;
    private readonly logDebug;
    private readonly logError;
    private stopTimeOuts;
    private track;
}
//# sourceMappingURL=aqm-service-notifs-websocket-factory.d.ts.map