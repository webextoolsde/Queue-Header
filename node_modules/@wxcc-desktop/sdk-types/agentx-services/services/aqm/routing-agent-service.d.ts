import { AqmReqs, Msg } from "../../core/aqm-reqs";
import { Service } from "../../index";
import Agent = Service.Aqm.Agent;
import Failure = Service.Aqm.Global.Failure;
export declare function routingAgent(routing: AqmReqs): {
    reload: import("../../core/aqm-reqs").ResEmpty<Agent.ReloginSuccess | Agent.ChannelReloginSuccess>;
    logout: import("../../core/aqm-reqs").Res<Agent.LogoutSuccess, {
        data: Agent.Logout;
    }>;
    stationLogin: import("../../core/aqm-reqs").Res<Agent.StationLoginSuccess, {
        data: Agent.UserStationLogin;
    }>;
    stateChange: import("../../core/aqm-reqs").Res<Agent.StateChangeSuccess, {
        data: Agent.StateChange;
    }>;
    eMockOutdialAniList: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Agent.OutdialAniListSuccess> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Agent.OutdialAniListSuccess) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Agent.OutdialAniListSuccess>;
    };
    eAgentDNRegistered: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Agent.DNRegistered> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Agent.DNRegistered) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Agent.DNRegistered>;
    };
    eAgentDNRegisterFailure: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Failure> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Failure) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Failure>;
    };
    eAgentMultiLogin: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        agentId: string;
        reason: string;
        type: "AgentMultiLoginCloseSession";
        agentSessionId: string;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                agentId: string;
                reason: string;
                type: "AgentMultiLoginCloseSession";
                agentSessionId: string;
            }>) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Msg<{
            agentId: string;
            reason: string;
            type: "AgentMultiLoginCloseSession";
            agentSessionId: string;
        }>>;
    };
    eAgentChannelReloginSuccess: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Agent.ChannelReloginSuccess> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Agent.ChannelReloginSuccess) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Agent.ChannelReloginSuccess>;
    };
    eAgentReloginSuccess: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Agent.ReloginSuccess> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Agent.ReloginSuccess) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Agent.ReloginSuccess>;
    };
    eAgentStationLoginSuccess: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Agent.StationLoginSuccess> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Agent.StationLoginSuccess) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Agent.StationLoginSuccess>;
    };
    eAgentStateChangeSuccess: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Agent.StateChangeSuccess> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Agent.StateChangeSuccess) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Agent.StateChangeSuccess>;
    };
    eAgentChannelStateChanged: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Agent.AgentChannelStateChanged> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Agent.AgentChannelStateChanged) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Agent.AgentChannelStateChanged>;
    };
    eAgentLogoutSuccess: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Agent.LogoutSuccess> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Agent.LogoutSuccess) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Agent.LogoutSuccess>;
    };
};
type ErrDetails = {
    status: number;
    type: string;
    trackingId: string;
};
type AgentErrorIds = {
    "Service.aqm.agent.stationLogin": ErrDetails;
} | {
    "Service.aqm.agent.stationLoginFailed": Failure;
} | {
    "Service.aqm.agent.stateChange": Failure;
} | {
    "Service.aqm.agent.reload": Failure;
} | {
    "Service.aqm.agent.logout": Failure;
} | {
    "Service.aqm.agent.mockOutdialAniList": Failure;
} | {
    "Service.reqs.generic.failure": {
        trackingId: string;
    };
} | "Service.aqm.agent.fetchAddressBooks";
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.aqm.agent": AgentErrorIds;
        }
    }
}
declare module "../../index" {
    namespace Service.Aqm.Agent {
        type LogoutSuccess = Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            agentSessionId: string;
            orgId: string;
            status: string;
            subStatus: string;
            loggedOutBy?: string;
            roles?: string[];
            type: "AgentLogoutSuccess";
        }>;
        type ChannelReloginSuccess = Msg<{
            agentId: string;
            orgId: string;
            status: string;
            dn: string;
            siteId: string;
            teamId: string;
            interactionIds: string[];
            agentSessionId: string;
            trackingId: string;
            profileType: string;
            channelsMap: Record<string, string[]>;
            agentChannelStateDetailMap: Record<string, Service.Aqm.Configs.AgentChannelTypeStates>;
            isExtension: boolean;
            roles?: string[];
            eventTime: number;
            deviceType?: DeviceType;
            deviceId?: string | null;
            reservedAgentChannelIds?: string[] | null;
            eventType: "AgentDesktopMessage";
            auxCodeId?: string;
            lastStateChangeTimestamp?: number;
            lastIdleCodeChangeTimestamp?: number;
            lastStateChangeReason?: string;
            type: "AgentChannelReloginSuccess";
        }>;
        type ReloginSuccess = Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            auxCodeId?: string;
            teamId: string;
            agentSessionId: string;
            dn: string;
            orgId: string;
            interactionIds: string[];
            isExtension: boolean;
            status: "LoggedIn";
            subStatus: "Idle";
            siteId: string;
            lastIdleCodeChangeTimestamp?: number;
            lastStateChangeTimestamp?: number;
            lastStateChangeReason?: string;
            profileType: string;
            channelsMap: Record<string, string[]>;
            channelsStates?: Map<Service.Aqm.Configs.Channels, Service.Aqm.Configs.AgentChannelTypeStates>;
            dialNumber?: string;
            roles?: string[];
            deviceType?: DeviceType;
            deviceId?: string | null;
            isEmergencyModalAlreadyDisplayed?: boolean;
            type: "AgentReloginSuccess";
        }>;
        type StateChangeSuccess = Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            auxCodeId: string;
            agentSessionId: string;
            orgId: string;
            status: string;
            subStatus: "Available" | "Idle";
            lastIdleCodeChangeTimestamp: number;
            lastStateChangeTimestamp: number;
            type: "AgentStateChangeSuccess";
            changedBy: string | null;
            changedById: string | null;
            changedByName: string | null;
            lastStateChangeReason: string;
        }>;
        type AgentChannelStateChanged = Msg<{
            agentId: string;
            orgId: string;
            channelType: string;
            AgentChannelStateDetail: Service.Aqm.Configs.AgentChannelTypeStates;
            changedBy: string | null;
            changedById: string | null;
            changedByName: string | null;
            connectedChannels: string[];
            agentSessionId: string;
            trackingId: string;
            type: "AgentChannelStateChanged";
            eventType: "AgentDesktopMessage";
        }>;
        type StationLoginSuccess = Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            auxCodeId: string;
            teamId: string;
            agentSessionId: string;
            orgId: string;
            interactionIds: string[];
            status: string;
            subStatus: "Available" | "Idle";
            siteId: string;
            lastIdleCodeChangeTimestamp: number;
            lastStateChangeTimestamp: number;
            profileType: string;
            channelsMap: Record<string, string[]>;
            dialNumber?: string;
            roles?: string[];
            supervisorSessionId?: string;
            type: "AgentStationLoginSuccess";
        }>;
        type DNRegistered = Msg<{
            eventType: "RoutingMessage";
            agentId: string;
            trackingId: string;
            dn: string;
            orgId: string;
            type: "AgentDNRegistered";
        }>;
        type OutdialAniListSuccess = Msg<{
            data: Record<string, any>;
        }>;
        type OutdialAni = {
            id: string;
            name: string;
        };
        type OutDialAniData = {
            initialFetchCompleted: boolean;
            data: OutdialAni[];
        };
        type Logout = {
            logoutReason?: "User requested logout" | "Inactivity Logout";
        };
        type StateChange = {
            state: AgentState;
            auxCodeIdArray: string;
            lastStateChangeReason?: string;
            agentId?: string;
        };
        type AgentState = "Available" | "Idle" | "RONA" | string;
        type UserStationLogin = {
            dialNumber?: string | null;
            dn?: string | null;
            teamId: string | null;
            teamName: string | null;
            roles?: Array<string>;
            siteId: string;
            usesOtherDN: boolean;
            skillProfileId?: string;
            auxCodeId: string;
            isExtension?: boolean;
            deviceType?: DeviceType;
            deviceId?: string | null;
            isEmergencyModalAlreadyDisplayed?: boolean;
        };
        type AddressBooks = {
            totalRecords?: number;
            totalPages?: number;
            page?: number;
            speedDials: Address[];
        };
        type Address = {
            desc: string;
            dn: string;
            phoneBookName?: string;
        };
        type AddressBooksData = {
            initialFetchCompleted: boolean;
            data: Address[];
            errorObj: any;
        };
        type DeviceType = null | Service.Conf.LoginOption | string;
    }
}
export {};
/**
 * @typedef {Object} Service_Aqm_Agent_StateChange
 * @summary Service.Aqm.Agent.StateChange
 * @property {Service_Aqm_Agent_AgentState} state State of the agent. Possible values are Available, Idle, and RONA.
 * @property {String} auxCodeIdArray Unique identifier for the global desktop state.
 */
/**
 * @typedef {String} Service_Aqm_Agent_AgentState
 * @summary Service.Aqm.Agent.AgentState
 * @description State of the agent. Possible values are Available, Idle, and RONA.
 */
/**
 * @typedef {Object} Service_Aqm_Agent_OutdialAni
 * @summary Service.Aqm.Agent.OutdialAni
 * @property {String} id Unique Identifier for the outdial ANI.
 * @property {String} name Name of the outdial ANI.
 */
//# sourceMappingURL=routing-agent-service.d.ts.map