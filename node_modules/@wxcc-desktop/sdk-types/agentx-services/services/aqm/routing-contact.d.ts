import { AqmReqs } from "../../core/aqm-reqs";
import { HttpReqs } from "../../core/http-reqs";
import { Service } from "../../index";
import Contact = Service.Aqm.Contact;
export declare const buildBlindTransferParamData: (pInteractionId: string, pData: Contact.blindTransferPayLoad) => {
    interactionId: string;
    data: Contact.transferV2Payload;
};
export declare const buildConsultTransferParamData: (pInteractionId: string, pData: Contact.consultTransferPayLoad) => {
    interactionId: string;
    data: Contact.transferV2Payload;
};
export declare const buildVTeamsTransferParamData: (pInteractionId: string, pData: Contact.vteamTransferPayLoad) => {
    interactionId: string;
    data: Contact.transferV2Payload;
};
export declare function createRoutingContactAPIS(routing: AqmReqs, http: HttpReqs): {
    consult: (p: {
        interactionId: string;
        data: Contact.consultData;
        url: string;
    }) => Promise<Contact.AgentContact>;
    consultV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
        data: Contact.consultDataV2;
    }>;
    consultAccept: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
    }>;
    consultEnd: (p: {
        interactionId: string;
        isConsult: boolean;
        isSecondaryEpDnAgent?: boolean;
    }) => Promise<Contact.AgentContact>;
    consultEndV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
        isConsult: boolean;
        isSecondaryEpDnAgent?: boolean | undefined;
        queueId?: string | undefined;
    }>;
    cancelCtq: (p: {
        interactionId: string;
        data: Contact.cancelCtq;
    }) => Promise<Contact.AgentContact>;
    exitConference: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
    }>;
    conferenceTransfer: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
    }>;
    hold: (p: {
        interactionId: string;
        isPostCallConsult: boolean;
        data: {
            mediaResourceId: string;
        };
    }) => Promise<{}>;
    unHold: (p: {
        interactionId: string;
        isPostCallConsult: boolean;
        data: {
            mediaResourceId: string;
        };
    }) => Promise<{}>;
    consultConference: (p: {
        interactionId: string;
        data: Contact.consultConferenceData | Contact.ConsultPayload | Contact.ConsultDN;
    }) => Promise<Contact.AgentContact>;
    consultConferenceV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
        data: Contact.consultConferenceDataV2;
    }>;
    buddyAgents: (p: {
        data: Contact.BuddyAgents;
    }) => Promise<Contact.BuddyAgentsSuccess>;
    buddyAgentsV2: import("../../core/aqm-reqs").Res<Contact.BuddyAgentsSuccess, {
        data: Contact.BuddyAgentsV2;
    }>;
    blindTransfer: (p: {
        interactionId: string;
        data: Contact.blindTransferPayLoad;
    }) => Promise<Contact.AgentContact>;
    blindTransferV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
        data: Contact.transferV2Payload;
    }>;
    vteamTransfer: (p: {
        interactionId: string;
        data: Contact.vteamTransferPayLoad;
    }) => Promise<Contact.AgentContact>;
    vteamTransferV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
        data: Contact.transferV2Payload;
    }>;
    consultTransfer: (p: {
        interactionId: string;
        data: Contact.consultTransferPayLoad;
    }) => Promise<Contact.AgentContact>;
    consultTransferV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
        data: Contact.transferV2Payload;
    }>;
    end: (p: {
        interactionId: string;
        isEndingFromNonPrimary?: boolean;
    }) => Promise<Contact.AgentContact>;
    endV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
        isEndingFromNonPrimary?: boolean | undefined;
    }>;
    cancelTask: (p: {
        interactionId: string;
    }) => Promise<Contact.AgentContact>;
    cancelTaskV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
    }>;
    wrapup: (p: {
        interactionId: string;
        data: Contact.WrapupPayLoad;
    }) => Promise<Contact.AgentContact>;
    wrapupV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
        data: Contact.WrapupV2PayLoad;
    }>;
    decline: (p: {
        interactionId: string;
        data: Contact.declinePayload;
        isConsult: boolean;
    }) => Promise<Contact.AgentContact>;
    reject: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
        data: Contact.declinePayload;
    }>;
    accept: (p: {
        interactionId: string;
    }) => Promise<Contact.AgentContact>;
    acceptV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
    }>;
    pauseRecording: (p: {
        interactionId: string;
    }) => Promise<Contact.AgentContact>;
    pauseRecordingV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
    }>;
    resumeRecording: (p: {
        interactionId: string;
        data: {
            autoResumed: boolean;
        };
    }) => Promise<Contact.AgentContact>;
    resumeRecordingV2: import("../../core/aqm-reqs").Res<Contact.AgentContact, {
        interactionId: string;
        data: {
            autoResumed: boolean;
        };
    }>;
    assign: (p: {
        interactionId: string;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
};
//# sourceMappingURL=routing-contact.d.ts.map