import { AqmReqs, Msg } from "../../core/aqm-reqs";
import { Service } from "../../index";
import "./aqm-service-contact-types";
import Supervisor = Service.Aqm.Supervisor;
export declare function routingSupervisor(routing: AqmReqs): {
    startMonitoring: import("../../core/aqm-reqs").Res<any, {
        data: Supervisor.MonitoringRequest;
    }>;
    endMonitoring: import("../../core/aqm-reqs").Res<any, {
        interactionId: string;
    }>;
    holdMonitoring: import("../../core/aqm-reqs").Res<any, {
        interactionId: string;
    }>;
    unHoldMonitoring: import("../../core/aqm-reqs").Res<any, {
        interactionId: string;
    }>;
    bargeIn: import("../../core/aqm-reqs").Res<any, {
        interactionId: string;
    }>;
    changeAgentState: import("../../core/aqm-reqs").Res<any, {
        orgId: string;
        data: any;
    }>;
    signoutAgent: (p: Supervisor.agentSignoutRequest, cb?: ((res: any) => any) | undefined) => Promise<any>;
    eMonitoringOffered: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Service.Aqm.Contact.AgentContact> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Service.Aqm.Contact.AgentContact) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Service.Aqm.Contact.AgentContact>;
    };
    eMonitoringStarted: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Service.Aqm.Contact.AgentContact> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Service.Aqm.Contact.AgentContact) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Service.Aqm.Contact.AgentContact>;
    };
    eMonitoringRequestCreateFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<any> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: any) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<any>;
    };
    eMonitoringFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Supervisor.MonitoringFailed> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Supervisor.MonitoringFailed) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Supervisor.MonitoringFailed>;
    };
    eMonitoringEnded: import("@uuip/unified-ui-platform-sdk").Signal.WithData<any> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: any) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<any>;
    };
    eMonitoringEndFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Supervisor.MonitoringEndFailed> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Supervisor.MonitoringEndFailed) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Supervisor.MonitoringEndFailed>;
    };
    eMonitoringHeld: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Supervisor.MonitoringHeld> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Supervisor.MonitoringHeld) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Supervisor.MonitoringHeld>;
    };
    eMonitoringHoldFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Supervisor.MonitoringFailed> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Supervisor.MonitoringFailed) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Supervisor.MonitoringFailed>;
    };
    eMonitoringUnHeld: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Supervisor.MonitoringHeld> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Supervisor.MonitoringHeld) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Supervisor.MonitoringHeld>;
    };
    eMonitoringUnHoldFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Supervisor.MonitoringFailed> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Supervisor.MonitoringFailed) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Supervisor.MonitoringFailed>;
    };
    eChangeAgentState: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Supervisor.Failure> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Supervisor.Failure) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Supervisor.Failure>;
    };
    eAgentMonitorStateChanged: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Service.Aqm.Contact.AgentMonitorStateChanged> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Service.Aqm.Contact.AgentMonitorStateChanged) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Service.Aqm.Contact.AgentMonitorStateChanged>;
    };
    eAgentMonitorStateChangeFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Service.Aqm.Contact.AgentMonitorStateChangeFailed> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Service.Aqm.Contact.AgentMonitorStateChangeFailed) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Service.Aqm.Contact.AgentMonitorStateChangeFailed>;
    };
    eAgentMonitoringEnded: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Service.Aqm.Contact.AgentMonitorEnded> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Service.Aqm.Contact.AgentMonitorEnded) => boolean) | undefined;
            timeout?: import("../../core/aqm-reqs").Timeout | undefined;
        } | undefined) => Promise<Service.Aqm.Contact.AgentMonitorEnded>;
    };
};
declare module "../../index" {
    namespace Service.Aqm.Supervisor {
        type MonitoringRequest = {
            id: string;
            monitorType: string;
            queueIds?: Set<string>;
            teams?: Set<string>;
            sites?: Set<string>;
            agents?: Set<string>;
            startUTCTimestamp?: number;
            continuousDuration?: number;
            taskId?: string;
            trackingId: string;
            invisibleMode?: boolean;
        };
        type MonitoringFailed = Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            queueId: string;
            queueName: string;
            supervisorDN: string;
            taskId?: string;
            reason: string;
            reasonCode: number;
            trackingId: string;
        }>;
        type MonitoringEndFailed = Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            taskId?: string;
            agentId?: string;
            reason: string;
            reasonCode: number;
            trackingId: string;
        }>;
        type MonitoringHeld = Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            supervisorDN: string;
            taskId?: string;
            trackingId: string;
            agentId: string;
            eventType: string;
        }>;
        type BargedIn = Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            taskId?: string;
            trackingId: string;
            agentId: string;
            eventType: string;
            type: string;
        }>;
        type Failure = Msg<{
            agentId: string;
            trackingId: string;
            reasonCode: number;
            orgId: string;
            reason: string;
        }>;
        type agentSignoutRequest = {
            orgId: string;
            data: agentSignoutDataPayload;
        };
        type agentSignoutDataPayload = {
            agentId: string;
            logoutReason: string;
        };
    }
}
type supervisorErrorIds = {
    "Service.aqm.supervisor.monitoringFailed": Supervisor.MonitoringFailed;
    "Service.aqm.supervisor.monitoringEndFailed": Supervisor.MonitoringEndFailed;
    "Service.aqm.supervisor.monitoringHoldFailed": Supervisor.MonitoringFailed;
    "Service.aqm.supervisor.monitoringUnHoldFailed": Supervisor.MonitoringFailed;
    "Service.aqm.supervisor.bargeInFailed": Supervisor.MonitoringFailed;
    "Service.aqm.supervisor.changeAgentStateFailed": Supervisor.Failure;
    "Service.aqm.supervisor.signoutAgentFailed": Supervisor.Failure;
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.aqm.supervisor": supervisorErrorIds;
        }
    }
}
export {};
//# sourceMappingURL=routing-supervisor-service.d.ts.map