import { Service } from "../../index";
import Cms = Service.Cms;
export declare function cmsService(): {
    fetchChatResponses: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Cms.ChatTemplateResponse) | undefined) => Promise<Cms.ChatTemplateResponse>;
    fetchTeamsById: (p: {
        orgId: string;
        teamId: string;
    }, cb?: ((res: any) => void | Cms.TeamResponseData) | undefined) => Promise<Cms.TeamResponseData>;
    fetchTeamsByPage: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: any) => void | (Cms.TeamResponse & Cms.ManagedTeamResponse)) | undefined) => Promise<Cms.TeamResponse & Cms.ManagedTeamResponse>;
    fetchQueuesByPage: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: any) => void | Cms.ManagedQueueResponse) | undefined) => Promise<Cms.ManagedQueueResponse>;
    fetchDesktopLayout: (p: {
        orgId: string;
        desktopLayoutId?: string | undefined;
    }, cb?: ((res: any) => void | Cms.DesktopLayoutResponse) | undefined) => Promise<Cms.DesktopLayoutResponse>;
    fetchGlobalDesktopLayoutV2: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Cms.GlobalDesktopLayoutResponseMappingV2) | undefined) => Promise<Cms.GlobalDesktopLayoutResponseMappingV2>;
    fetchUserRecord: (p: {
        userId: string;
        orgId: string;
    }, cb?: ((res: any) => void | Cms.UserRecordResponse) | undefined) => Promise<Cms.UserRecordResponse>;
    fetchUserProfile: (p: {
        profileId: string;
        orgId: string;
    }, cb?: ((res: any) => void | Cms.UserProfileResponse) | undefined) => Promise<Cms.UserProfileResponse>;
    fetchEntryPointsByPage: (p: {
        orgId: any;
        url: string;
    }, cb?: ((res: any) => void | Cms.EntryPointsResponse) | undefined) => Promise<Cms.EntryPointsResponse>;
    fetchDialNumberList: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: any) => void | Cms.DialNumberResponse) | undefined) => Promise<Cms.DialNumberResponse>;
    fetchAddressBookByPage: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: any) => void | Cms.AddressBookResponse) | undefined) => Promise<Cms.AddressBookResponse>;
    fetchOrgUrlMappingByNameV2: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Cms.OrgUrlMappingResponse) | undefined) => Promise<Cms.OrgUrlMappingResponse>;
    fetchMicrosoftConfigData: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Cms.MicrosoftOrgConfig) | undefined) => Promise<Cms.MicrosoftOrgConfig>;
    fetchWebexConfigData: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Cms.WebexOrgConfig) | undefined) => Promise<Cms.WebexOrgConfig>;
    fetchAIGeneratedSummaries: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Cms.AIGeneratedSummaries) | undefined) => Promise<Cms.AIGeneratedSummaries>;
    fetchAIAgentBurnout: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Cms.AIAgentBurnout) | undefined) => Promise<Cms.AIAgentBurnout>;
    fetchOrganizationSettings: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Cms.OrganizationSettingsResponse) | undefined) => Promise<Cms.OrganizationSettingsResponse>;
    fetchAIFeature: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Cms.AIFeatureResponse) | undefined) => Promise<Cms.AIFeatureResponse>;
    fetchQueueDetailsById: (p: {
        orgId: string;
        queueId: string;
        agentsUpdatedInfo?: boolean | undefined;
    }, cb?: ((res: any) => void | Cms.QueueDetailsResponseData) | undefined) => Promise<Cms.QueueDetailsResponseData>;
    reassignQueueAgentsData: (p: {
        orgId: string;
        queueId: string;
        addedAgents: Array<string>;
        removedAgents: Array<string>;
    }, cb?: ((res: any) => void | Cms.NoContentResponse) | undefined) => Promise<Cms.NoContentResponse>;
    fetchSkillProfiles: (p: {
        orgId: string;
        pageSize?: number | undefined;
        page?: number | undefined;
        search?: string | undefined;
    }, cb?: ((res: any) => void | Cms.SkillProfilesResponse) | undefined) => Promise<Cms.SkillProfilesResponse>;
    fetchSkillProfile: (p: {
        orgId: string;
        skillProfileId: string;
    }, cb?: ((res: any) => void | Cms.SkillProfile) | undefined) => Promise<Cms.SkillProfile>;
    fetchUsersByPage: (p: {
        orgId: string;
        filter?: string | undefined;
        userInQueue?: boolean | undefined;
        queueId?: string | undefined;
        attributes?: string | undefined;
        sort?: string | undefined;
        page?: number | undefined;
        pageSize?: number | undefined;
        searchValue?: string | undefined;
    }, cb?: ((res: any) => void | Cms.UserDetailResponse) | undefined) => Promise<Cms.UserDetailResponse>;
    fetchQueueConfigLimit: (p: {
        orgId: string;
        queueId: string;
    }, cb?: ((res: any) => void | Cms.QueueConfigLimitResponse) | undefined) => Promise<Cms.QueueConfigLimitResponse>;
    fetchCherryPickEnabledQueues: (p: {
        orgId: string;
        agentId: string;
        teamId: string;
    }, cb?: ((res: any) => void | Cms.CherryPickQueuesResponse) | undefined) => Promise<Cms.CherryPickQueuesResponse>;
    fetchMicrosoftConfig: (p: {
        orgId: string;
    }, allowRetry?: boolean) => Promise<Cms.MicrosoftOrgConfig>;
    fetchAllTeams: (orgId: string, filter?: false | {
        dbId: string;
    }) => Promise<Cms.AllTeamResponse>;
    fetchAllManagedTeams: (orgId: string) => Promise<Cms.ManagedAllTeamResponse>;
    fetchAllManagedQueues: (orgId: string) => Promise<Cms.ManagedAllQueueResponse>;
    fetchAllEntryPoints: (orgId: string) => Promise<Cms.AllEntryPointResponse>;
    fetchAllAddressBook: (p: {
        orgId: string;
        addressBookId: string;
        allowRetry: boolean;
    }) => Promise<any>;
    reassignQueueAgents: (p: {
        orgId: string;
        queueId: string;
        addedAgents: Array<string>;
        removedAgents: Array<string>;
    }) => Promise<Cms.NoContentResponse>;
    updateUser: (p: {
        userId: string;
        orgId: string;
        data: any;
    }, cb?: ((res: any) => void | Cms.UserRecordResponse) | undefined) => Promise<Cms.UserRecordResponse>;
};
type cmsErrorIds = "Service.cms.fetchChatResponses" | "Service.cms.fetchAllTeams" | "Service.cms.fetchTeamsById" | "Service.cms.fetchAllQueues" | "Service.cms.fetchDesktopLayout" | "Service.cms.fetchDefaultDesktopLayout" | "Service.cms.fetchTeamsByAgent" | "Service.cms.fetchManagedTeams" | "Service.cms.fetchUserRecord" | "Service.cms.fetchUserProfile" | "Service.cms.fetchEntryPointsList" | "Service.cms.fetchDialNumberList" | "Service.cms.fetchAddressBookList" | "Service.cms.fetchMicrosoftConfig" | "Service.cms.fetchAIGeneratedSummaries" | "Service.cms.fetchAIAgentBurnout" | "Service.cms.fetchQueueDetailsById" | "Service.cms.fetchAIFeature" | "Service.cms.fetchSkillProfiles" | "Service.cms.fetchSkillProfile" | "Service.cms.fetchUsersByPage" | "Service.cms.fetchQueueConfigLimit" | "Service.cms.fetchCherryPickEnabledQueues" | "Service.cms.updateUser";
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.cms": cmsErrorIds;
        }
    }
}
declare module "../../index" {
    namespace Service.Cms {
        type NoContentResponse = Record<string, never>;
        type ChatTemplateResponse = ChatTemplate[];
        type ChatTemplate = {
            id: string;
            name: string;
            language: string;
            status: boolean;
            content: string;
            queueIds: string[];
            links: any;
            createdTime: number;
            lastUpdatedTime: number;
            allQueues?: boolean;
        };
        type SplitIOKey = {
            key: string;
        };
        type AllTeamResponse = TeamResponseData[];
        type ManagedAllTeamResponse = ManagedTeamResponseData[];
        type ManagedAllQueueResponse = ManagedQueueResponseData[];
        type AllEntryPointResponse = EntryPointsResponseData[];
        type AllAddressBookResponse = AddressBookResponseData[];
        type AllDialNumberResponse = DialNumberResponseData[];
        type TeamResponse = {
            meta: {
                links: {
                    next: string;
                };
            };
            data: AllTeamResponse;
        };
        type ManagedTeamResponse = {
            meta: {
                links: {
                    next: string;
                };
            };
            data: ManagedAllTeamResponse;
        };
        type ManagedQueueResponse = {
            meta: {
                links: {
                    next: string;
                };
            };
            data: ManagedAllQueueResponse;
        };
        type EntryPointsResponse = {
            meta: {
                links: {
                    next: string;
                };
            };
            data: AllEntryPointResponse;
        };
        type AddressBookResponse = {
            meta: {
                links: {
                    next: string;
                };
                totalPages: number;
            };
            data: AllAddressBookResponse;
        };
        type DialNumberResponse = {
            meta: {
                links: {
                    next: string;
                };
                totalPages: number;
            };
            data: AllDialNumberResponse;
        };
        type fetchTeamsByAgentResponse = {
            details: {
                user: TeamsByAgentMap;
            };
        };
        type TeamsByAgentMap = {
            id: string;
            type: "user";
            attributes: TeamByAgentAuxiliaryDataAttributes;
        };
        type EpDnListMap = {
            name: string;
            dialledNumber: string;
            id?: string;
        };
        type EpListMap = {
            name: string;
            id: string;
        };
        type AgentIdleCodes = {
            idleCodes: string[];
            accessIdleCode: "ALL" | "SPECIFIC";
        };
        type AgentDataResponse = {
            meta: {
                totalRecords: number;
            };
            data: Agent[];
        };
        type Agent = {
            id: string;
            firstName: string;
            lastName: string;
            email: string;
        };
        type IdleCode = Record<string, any>;
        type OrgIdleCodes = {
            idleCodes: Service.Aqm.Configs.Entity[];
        };
        type DesktopLayoutResponseMapping = {
            attributes: DesktopLayoutAuxiliaryDataAttributes;
            auxiliaryMetadata: any;
        };
        type GlobalDesktopLayoutResponseMapping = {
            auxiliaryDataList: DesktopLayoutAuxiliaryData[];
            auxiliaryMetadata: any;
        };
        type GlobalDesktopLayoutResponseMappingV2 = DesktopLayoutResponse[];
        type TeamResponseData = {
            id: string;
            dbId: string;
            active: boolean;
            createdTime: number;
            desktopLayoutId: string;
            lastUpdatedTime: number;
            multiMediaProfileId: string;
            name: string;
            siteId: string;
            skillProfileId: string;
            teamStatus: string;
            teamType: string;
            userIds: string[];
        };
        type ManagedTeamResponseData = {
            id: string;
            links: [];
            name: string;
            dbId?: string;
            siteId: string;
        };
        type ManagedQueueResponseData = {
            id: string;
            links: [];
            name: string;
        };
        type AIGeneratedSummariesResponseData = {
            organizationId: string;
            id: string;
            version: number;
            callDropSummariesEnabled: boolean;
            virtualAgentTransferSummariesEnabled: boolean;
            consultTransferSummariesEnabled: boolean;
            agentInclusionType: string;
            links: Array<any>;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type AIAgentBurnoutResponseData = {
            organizationId: string;
            id: string;
            version: number;
            enabled: boolean;
            agentInclusionType: string;
            wellnessBreakReminders: string;
            links: Array<any>;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type DesktopLayoutAuxiliaryData = {
            id: string;
            type: "desktop-layout";
            attributes: DesktopLayoutAuxiliaryDataAttributes;
            auxiliaryDataType: string;
        };
        type TeamByAgentAuxiliaryDataAttributes = {
            teamInfo__s: any;
        };
        type DesktopLayoutResponse = {
            createdTime: number;
            defaultJsonModified: boolean;
            defaultJsonModifiedTime: number;
            description: string;
            editedBy: string;
            global: boolean;
            id: string;
            jsonFileContent: string;
            jsonFileName: string;
            lastUpdatedTime: number;
            modifiedTime: number;
            name: string;
            status: boolean;
            teamIds: string[];
            validated: boolean;
            validatedTime: number;
        };
        type DesktopLayoutAuxiliaryDataAttributes = {
            description__s: string;
            jsonFileContent__s: string;
            global__i: number;
            assigned__i: number;
            editedBy__s: string;
            name__s: string;
            cstts: number;
            status__i: number;
            tid: string;
            validatedTime__l: number;
            sid: string;
        };
        type UserRecordResponse = {
            organizationId: string;
            id: string;
            firstName: string;
            lastName: string;
            email: string;
            workPhone: string;
            mobile: string;
            ciUserId: string;
            xspVersion: string;
            subscriptionId: string;
            userProfileId: string;
            contactCenterEnabled: boolean;
            siteId: string;
            teamIds: string[];
            skillProfileId: string;
            agentProfileId: string;
            multimediaProfileId: string;
            deafultDialledNumber: string;
            externalIdentifier: string;
            active: boolean;
            imiUserCreated: boolean;
            links: any;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type UserProfileResponse = {
            accessAllEntryPoints: string;
            accessAllModules: string;
            accessAllQueues: string;
            accessAllSites: string;
            accessAllTeams: string;
            active: boolean;
            createdTime: number;
            description: string;
            editableFolderIds: string;
            entryPoints: Array<string>;
            id: string;
            lastUpdatedTime: number;
            name: string;
            nonViewableFolderIds: Array<string>;
            organizationId: string;
            profileType: string;
            queues: Array<string>;
            sites: Array<string>;
            teams: Array<string>;
            userProfileAppModules: Array<any>;
            version: number;
            viewableFolderIds: Array<string>;
        };
        type EntryPointsResponseData = {
            active: boolean;
            channelType: string;
            createdTime: number;
            description: string;
            entryPointType: string;
            id: string;
            lastUpdatedTime: number;
            links: any;
            maximumActiveContacts: 0;
            name: string;
            routePointId: string;
            serviceLevelThreshold: number;
            subscriptionId: string;
            xspVersion: string;
            version: number;
            ccOneQueue: boolean;
        };
        type DialNumberResponseData = {
            organizationId: string;
            id: string;
            version: number;
            dialledNumber: string;
            routePointId: string;
            entryPointId: string;
            defaultAni: boolean;
            links: Array<any>;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type AddressBookResponseData = {
            id: string;
            version: number;
            name: string;
            number: string;
            links: Array<any>;
        };
        type MicrosoftOrgConfig = {
            meta: {
                links: {
                    next: string;
                };
                totalPages: number;
            };
            data: MicrosoftConfigResponse[];
        };
        type MicrosoftConfigResponse = {
            id: string;
            organizationId: string;
            active: boolean;
            accountDetails: MicrosoftAccountDetails;
            showUserDetails: boolean;
            idleCodes: MicrosoftIdleCodes;
            stateSynchronization: boolean;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type MicrosoftAccountDetails = {
            name: string;
            tenantId: string;
            userName: string;
        };
        type MicrosoftIdleCodes = {
            doNotDisturbId: string;
            onACallId: string;
            presentingId: string;
        };
        type OrgUrlMappingResponse = OrgUrlMappingResponseData[];
        type OrgUrlMappingResponseData = {
            organizationId: string;
            id: string;
            version: number;
            name: string;
            url: string;
            links: Array<any>;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type WebexOrgConfig = {
            data: WebexConfigResponse[];
        };
        type AIGeneratedSummaries = {
            data: AIGeneratedSummariesResponseData[];
        };
        type AIAgentBurnout = {
            meta: Meta;
            data: AIAgentBurnoutResponseData[];
        };
        type AIFeatureResponseData = {
            id: string;
            realtimeTranscripts: RealTimeTranscript;
            suggestedResponses: SuggestedResponses;
            links: Array<any>;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type RealTimeTranscript = {
            enable: boolean;
            agentInclusionType: string;
        };
        type SuggestedResponses = {
            enable: boolean;
        };
        type AIFeatureResponse = {
            meta: Meta;
            data: AIFeatureResponseData[];
        };
        type OrganizationSettingsResponse = OrganizationSettings[];
        type OrganizationSettings = {
            organizationId: string;
            id: string;
            aiAssistantQuantity: number;
        };
        type WebexConfigResponse = {
            id: string;
            organizationId: string;
            showUserDetails: boolean;
            stateSynchronization: boolean;
            idleCodes: WebexIdleCodes;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type WebexIdleCodes = {
            busyId: string;
            doNotDisturbId: string;
            inACalendarMeetingId: string;
            inAMeetingId: string;
            onACallId: string;
            outOfOfficeId: string;
            presentingId: string;
            quietHoursId: string;
        };
        type Queue = {
            id: string;
            name: string;
        };
        type Meta = {
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
            links: {
                first: string;
                last: string;
                next: string;
                self: string;
            };
            orgid: string;
        };
        type QueueListResponse = {
            meta: Meta;
            data: Queue[];
        };
        type EPListResponse = {
            meta: Meta;
            data: EpDnListMap[] | EpListMap[];
        };
        type QueueDetailsResponseData = {
            id: string;
            queueRoutingType: string;
            routingType: string;
            queueSkillRequirements: string[];
            agentsLastUpdatedTime?: number;
            agentsLastUpdatedByUserName?: string;
            agentsLastUpdatedByUserEmailPrefix?: string;
        };
        type queueDetails = {
            id: string;
            name: string;
        };
        type SkillProfilesResponse = {
            meta: SkillProfilesMetaData;
            data: SkillProfile[];
        };
        type SkillProfilesMetaData = {
            page?: number;
            pageSize?: number;
            totalPages?: number;
            totalRecords?: number;
        };
        type SkillProfile = {
            id: string;
            name: string;
            activeSkills?: Skill[];
            activeEnumSkills?: Skill[];
        };
        type Skill = {
            id?: string;
            textValue?: string;
            booleanValue?: boolean;
            proficiencyValue?: number;
            enumValue?: string;
            enumSkillValueId?: string;
            skillId?: string;
        };
        type UserDetailResponse = {
            meta: {
                orgid: string;
                page: number;
                pageSize: number;
                totalPages: number;
                totalRecords: number;
            };
            data: UserDetail[];
        };
        type UserDetail = {
            organizationId: string;
            id: string;
            version: number;
            firstName: string;
            lastName: string;
            email: string;
            ciUserId: string;
            userProfileId: string;
            contactCenterEnabled: boolean;
            active: boolean;
            dbId: string;
            imiUserCreated: boolean;
            systemDefault: boolean;
            userLevelBurnoutInclusion: string;
            userLevelAutoCSATInclusion: string;
            userLevelWellnessBreakReminders: string;
            userLevelSummariesInclusion: string;
            links: Array<{
                rel: string;
                href: string;
            }>;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type QueueConfigLimitResponse = {
            organizationId: string;
            id: string;
            limitKey: string;
            limitValue: number;
        };
        type CherryPickQueue = {
            id: string;
            name: string;
        };
        type CherryPickQueuesResponse = {
            data: CherryPickQueue[];
        };
    }
}
export {};
//# sourceMappingURL=cms-service.d.ts.map