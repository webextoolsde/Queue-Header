export declare const cmsContent: {
    chatResponse: {
        id: string;
        name: string;
        language: string;
        status: boolean;
        content: string;
        allQueues: boolean;
        queueIds: string[];
        links: never[];
        createdTime: number;
        lastUpdatedTime: number;
    }[];
    teams: {
        id: string;
        name: string;
        teamType: string;
        teamStatus: string;
        active: boolean;
        siteId: string;
        siteName: string;
        multiMediaProfileId: string;
        userIds: string[];
        desktopLayoutId: string;
        links: {
            rel: string;
            href: string;
        }[];
        createdTime: number;
        lastUpdatedTime: number;
    }[];
    agentTeams: {
        details: {
            user: {
                id: string;
                auxiliaryDataType: string;
                type: string;
                attributes: {
                    lastName__s: string;
                    _lmts__l: number;
                    historicalReportsEnabled__i: number;
                    ciUserId__s: string;
                    multimediaProfileId__s: null;
                    mobile__s: string;
                    externalId__s: string;
                    work__s: string;
                    roleId__s: null;
                    status__i: number;
                    tid: string;
                    sid: string;
                    secretQuestion__s: null;
                    xspVersion__s: string;
                    subscriptionId__s: string;
                    city__s: string;
                    login__s: string;
                    profileId__s: string;
                    invalidAttempts__i: number;
                    street__s: string;
                    postalCode__s: string;
                    agentProfileId__s: string;
                    teamInfo__s: {
                        "421": string;
                        "259": string;
                    };
                    locked__i: null;
                    timezone__s: null;
                    passwordPolicyId__s: null;
                    country__s: string;
                    bcUserId__s: string;
                    siteId__s: string;
                    email__s: string;
                    cstts: number;
                    _type__s: string;
                    passwordLastModifiedTime__l: null;
                    dbId__l: string;
                    passwordHistoryData__s: string;
                    state__s: string;
                    firstName__s: string;
                    password__s: null;
                    extMultimediaProfileId__s: null;
                    defaultDn__s: string;
                    secretAnswer__s: null;
                    changePassword__i: null;
                    callCenterEnabled__i: number;
                    teamIds__sa: string[];
                    skillProfileId__s: string;
                };
                login: string;
                emailAddress: string;
                password: string;
            };
        };
    };
    desktopLayout: {
        id: string;
        name: string;
        description: string;
        editedBy: string;
        jsonFileName: string;
        jsonFileContent: string;
        global: boolean;
        status: boolean;
        defaultJsonModified: boolean;
        validated: boolean;
        validatedTime: number;
        defaultJsonModifiedTime: number;
        modifiedTime: number;
        teamIds: string[];
        createdTime: number;
        lastUpdatedTime: number;
    };
    userRecord: {
        organizationId: string;
        id: string;
        version: number;
        firstName: string;
        lastName: string;
        email: string;
        workPhone: string;
        mobile: string;
        ciUserId: string;
        broadCloudUserId: string;
        xspVersion: string;
        subscriptionId: string;
        userProfileId: string;
        contactCenterEnabled: boolean;
        siteId: string;
        teamIds: string[];
        skillProfileId: string;
        agentProfileId: string;
        multimediaProfileId: string;
        deafultDialledNumber: string;
        externalIdentifier: string;
        active: boolean;
        dbId: string;
        imiUserCreated: boolean;
        _links: {
            self: {
                href: string;
            };
            agent_profile: {
                href: string;
            };
            skill_profile: {
                href: string;
            };
            organization: {
                href: string;
            };
            user_profile: {
                href: string;
            };
        };
        createdTime: number;
        lastUpdatedTime: number;
    };
    teamsByPage: {
        meta: {
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
            links: {
                self: string;
            };
        };
        data: ({
            organizationId: string;
            id: string;
            version: number;
            dbId: string;
            name: string;
            teamType: string;
            teamStatus: string;
            active: boolean;
            siteId: string;
            desktopLayoutId: string;
            siteName: string;
            multiMediaProfileId: string;
            userIds: string[];
            links: {
                rel: string;
                href: string;
            }[];
            createdTime: number;
            lastUpdatedTime: number;
        } | {
            organizationId: string;
            id: string;
            version: number;
            dbId: string;
            name: string;
            teamType: string;
            teamStatus: string;
            active: boolean;
            siteId: string;
            desktopLayoutId: string;
            siteName: string;
            userIds: string[];
            links: {
                rel: string;
                href: string;
            }[];
            createdTime: number;
            lastUpdatedTime: number;
            multiMediaProfileId?: undefined;
        })[];
    };
    managedTeamsByPage: {
        meta: {
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
            links: {
                self: string;
            };
        };
        data: {
            id: string;
            dbId: string;
            name: string;
            links: never[];
        }[];
    };
    managedQueuesByPage: {
        meta: {
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
            links: {
                self: string;
            };
        };
        data: {
            id: string;
            name: string;
            links: never[];
        }[];
    };
    queueDetailById: {
        id: string;
        queueName: string;
        channelType: string;
        routingType: string;
        queueRoutingType: string;
        queueSkillRequirements: string[];
        links: never[];
    };
    entryPoints: {
        meta: {
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
            links: {
                self: string;
            };
        };
        data: {
            id: string;
            name: string;
            description: string;
            entryPointType: string;
            channelType: string;
            active: boolean;
            serviceLevelThreshold: number;
            maximumActiveContacts: number;
            xspVersion: string;
            subscriptionId: string;
            routePointId: string;
            links: never[];
            createdTime: number;
            lastUpdatedTime: number;
        }[];
    };
    dialNumbers: {
        meta: {
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
            links: {
                self: string;
            };
        };
        data: ({
            organizationId: string;
            id: string;
            version: number;
            dialledNumber: string;
            routePointId: string;
            entryPointId: string;
            defaultAni: boolean;
            links: {
                rel: string;
                href: string;
            }[];
            createdTime: number;
            lastUpdatedTime: number;
        } | {
            organizationId: string;
            id: string;
            version: number;
            dialledNumber: string;
            routePointId: string;
            entryPointId: string;
            links: {
                rel: string;
                href: string;
            }[];
            createdTime: number;
            lastUpdatedTime: number;
            defaultAni?: undefined;
        })[];
    };
    agentState: {
        meta: {
            orgid: string;
            links: {
                self: string;
            };
        };
        data: {
            agentId: string;
            auxCodeId: string;
            lastStateChangeReason: string;
            state: string;
        }[];
    };
    addressBook: {
        meta: {
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
            links: {
                next: string;
                last: string;
                self: string;
                first: string;
            };
        };
        data: {
            id: string;
            version: number;
            name: string;
            number: string;
            links: never[];
        }[];
    };
    orgUrlMapping: {
        organizationId: string;
        id: string;
        version: number;
        name: string;
        url: string;
        links: never[];
        createdTime: number;
        lastUpdatedTime: number;
    }[];
    microsoftOrgConfig: {
        id: string;
        organizationId: string;
        active: boolean;
        accountDetails: {
            name: string;
            tenantId: string;
            userName: string;
        };
        showUserDetails: boolean;
        idleCodes: {
            doNotDisturbId: string;
            onACallId: string;
            presentingId: string;
        };
        stateSynchronization: boolean;
        createdTime: number;
        lastUpdatedTime: number;
    }[];
    webexOrgConfig: {
        id: string;
        organizationId: string;
        showUserDetails: boolean;
        stateSynchronization: boolean;
        idleCodes: {
            busyId: string;
            doNotDisturbId: string;
            inACalendarMeetingId: string;
            inAMeetingId: string;
            onACallId: string;
            outOfOfficeId: string;
            presentingId: string;
            quietHoursId: string;
        };
        createdTime: number;
        lastUpdatedTime: number;
    }[];
    aIGeneratedSummaries: {
        id: string;
        organizationId: string;
        featureFlags: {
            isCallDropSummaryEnabled: string;
            isVirtualAgentSummaryEnabled: string;
        };
        createdTime: number;
        lastUpdatedTime: number;
    }[];
    aIAgentBurnout: {
        meta: {
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
            links: {};
        };
        data: {
            organizationId: string;
            id: string;
            version: number;
            enabled: boolean;
            agentInclusionType: string;
            wellnessBreakReminders: string;
            links: never[];
            createdTime: number;
            lastUpdatedTime: number;
        }[];
    };
    aiFeature: {
        meta: {
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
        };
        data: {
            id: string;
            realtimeTranscripts: {
                enable: boolean;
                agentInclusionType: string;
            };
            suggestedResponses: {
                enable: boolean;
            };
            links: never[];
            createdTime: number;
            lastUpdatedTime: number;
        }[];
    };
    mockSkillProfiles: {
        id: string;
        name: string;
        description: string;
        links: never[];
        createdTime: number;
        lastUpdatedTime: number;
    }[];
    mockSkills: {
        id: string;
        name: string;
        description: string;
        activeSkills: ({
            id: string;
            booleanValue: boolean;
            skillId: string;
            textValue?: undefined;
        } | {
            id: string;
            textValue: string;
            skillId: string;
            booleanValue?: undefined;
        })[];
        createdTime: number;
        lastUpdatedTime: number;
    };
    mockReassignAgent: {
        id: string;
        queueRoutingType: string;
        routingType: string;
        queueSkillRequirements: string[];
        agentsLastUpdatedTime: number;
        agentsLastUpdatedByUserName: string;
        agentsLastUpdatedByUserEmailPrefix: string;
    };
    mockUserDetail: {
        meta: {
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
        };
        data: {
            organizationId: string;
            id: string;
            version: number;
            firstName: string;
            lastName: string;
            email: string;
            ciUserId: string;
            userProfileId: string;
            contactCenterEnabled: boolean;
            active: boolean;
            dbId: string;
            imiUserCreated: boolean;
            systemDefault: boolean;
            userLevelBurnoutInclusion: string;
            userLevelAutoCSATInclusion: string;
            userLevelWellnessBreakReminders: string;
            userLevelSummariesInclusion: string;
            links: {
                rel: string;
                href: string;
            }[];
            createdTime: number;
            lastUpdatedTime: number;
        }[];
    };
    mockQueueConfigLimit: {
        organizationId: string;
        id: string;
        limitKey: string;
        limitValue: number;
    };
    mockCherryPickQueues: {
        data: {
            queueId: string;
            queueName: string;
        }[];
    };
};
//# sourceMappingURL=cms-service.mock.d.ts.map