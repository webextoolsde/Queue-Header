import { TemplateResult } from "lit-html";
import { Service } from "../..";
import { AqmService } from "../aqm/aqm-service";
export declare class ConfService {
    private readonly aqm;
    profile: Service.Conf.Profile | null;
    abs: any;
    subStatus: string;
    status: string;
    DEFAULT_PAGE_SIZE: number;
    constructor(aqm: AqmService, abs: any);
    getFormattedUrl(url: string): string;
    getSortedVoiceOptions: (loginVoiceOptions: Service.Conf.LoginOption[]) => LoginOption[];
    getLoginVoiceOptions: (loginVoiceOptions: Service.Conf.LoginOption[] | undefined, webRtcEnabled: boolean) => LoginOption[];
    getDefaultIdleCode: (idleCodes: Service.Aqm.Configs.Entity[]) => Service.Aqm.Configs.Entity | undefined;
    getDefaultWrapUpCode: (wrapUpReasonList: Service.Aqm.Configs.Entity[]) => Service.Aqm.Configs.Entity | undefined;
    updateAuxCodeConfig: (idleCodes: Service.Aqm.Configs.Entity[], wrapUpReasonList: Service.Aqm.Configs.Entity[]) => void;
    updateWrapUpCodeConfig: (agentWrapUpCodes: Service.Aqm.Configs.agentWrapUpCodes) => void;
    setDefaultIdleCode: (defaultIdleData: {
        id: string;
        name: string;
    }) => void;
    setDefaultWrapUpCode: (defaultWrapUpData: {
        id: string;
        name: string;
    }) => void;
    initializeProfile: (configResp: Service.Conf.Profile, orgId?: string) => void;
    parseAgentBooleanAttribute: (agent: Service.Aqm.Configs.AgentPropertyChanged["data"]["data"], name: string) => any;
    parseAgentProfileBooleanAttribute: (profile: Service.Aqm.Configs.UpdateAgentProfile["data"]["data"]["agent-profile"], name: string) => any;
    fetchProfile(orgId?: string, userId?: string, isSupervisor?: boolean): Promise<Service.Conf.Profile>;
    updateProfileTeams(teams: Service.Conf.Team[]): void;
    updateProfileTeamsMeta(teamsMeta: Service.Conf.MetaType | undefined): void;
}
export type LoginOption = "AGENT_DN" | "EXTENSION" | "BROWSER";
declare module "../../index" {
    namespace Service.Conf {
        export type Profile = {
            microsoftConfig?: {
                showUserDetailsMS?: boolean;
                stateSynchronizationMS?: boolean;
            };
            webexConfig?: {
                showUserDetailsWebex?: boolean;
                stateSynchronizationWebex?: boolean;
            };
            teams: Team[];
            defaultDn: string;
            forceDefaultDn: Record<string, any> | boolean;
            forceDefaultDnForAgent: boolean;
            regexUS: RegExp | string;
            regexOther: RegExp | string;
            agentId: string;
            agentName: string;
            agentMailId: string;
            agentSubStatus: string;
            agentStatus: string;
            agentProfileID: string;
            dialPlan: Service.Aqm.Configs.DialPlan;
            skillProfileId: string;
            siteId: string;
            enterpriseId: string;
            privacyShieldVisible: string | boolean;
            idleCodes: Service.Aqm.Configs.Entity[];
            idleCodesList?: Array<string>;
            idleCodesAccess?: "ALL" | "SPECIFIC";
            idleCode: any;
            defaultIdleName: string;
            wrapupCodes: Service.Aqm.Configs.Entity[];
            agentWrapUpCodes?: Service.Aqm.Configs.agentWrapUpCodes;
            agentDefaultWrapUpCode?: Service.Aqm.Configs.agentDefaultWrapupCode;
            defaultWrapupCode: string;
            wrapUpData: Service.Aqm.Configs.WrapupData | any;
            orgId: string;
            isOutboundEnabledForTenant: boolean;
            isOutboundEnabledForAgent: boolean;
            isAdhocDialingEnabled: boolean;
            isAgentAvailableAfterOutdial: boolean;
            isCampaignManagementEnabled: boolean;
            outDialEp: string;
            isEndCallEnabled: boolean;
            isEndConsultEnabled: boolean;
            cadVariables: Service.Aqm.Configs.CadVariables[];
            callVariablesSuppressed: any;
            lcmUrl: string;
            agentDbId: string;
            agentAnalyzerId: string;
            allowConsultToQueue: boolean;
            campaignManagerAdditionalInfo: string;
            agentPersonalStatsEnabled: boolean;
            addressBookId?: string;
            outdialANIId?: string;
            accessEntryPoint?: string;
            accessBuddyTeam?: string;
            accessQueue?: string;
            analyserUserId?: string;
            isCallMonitoringEnabled?: boolean;
            isMidCallMonitoringEnabled?: boolean;
            isBargeInEnabled?: boolean;
            isManagedTeamsEnabled?: boolean;
            isManagedQueuesEnabled?: boolean;
            isSendMessageEnabled?: boolean;
            isAgentStateChangeEnabled?: boolean;
            isSignOutAgentsEnabled?: boolean;
            urlMappings?: URLMappings;
            preferredSupervisorTeamId: string;
            isTimeoutDesktopInactivityEnabled: boolean;
            timeoutDesktopInactivityMins?: number;
            isAnalyzerEnabled?: boolean;
            tenantTimezone?: string;
            loginVoiceOptions?: LoginOption[];
            deviceType?: Service.Aqm.Agent.DeviceType;
            webRtcEnabled: boolean;
            organizationIdleCodes?: Service.Aqm.Configs.Entity[];
            isRecordingManagementEnabled?: boolean;
            lostConnectionRecoveryTimeout: number;
            maskSensitiveData?: boolean;
            teamsMeta?: MetaType;
        };
        export { LoginOption };
        export type Team = {
            teamId: string;
            teamName: string;
            desktopLayoutId?: string;
        };
        export type MetaType = {
            links?: {};
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
        };
        export type TeamData = {
            meta: MetaType;
            data: Team[];
        };
        export type TeamItem = {
            name: string;
            id: string;
            index: number;
            ariaLabel: string;
            template: (data: any) => TemplateResult;
        };
        export type QueuesData = {
            meta: MetaType;
            data: Queue[];
        };
        export type Queue = {
            queueId: string;
            queueName: string;
        };
        export type URLMappings = {
            acqueonApiUrl: string;
            acqueonConsoleUrl: string;
        };
        export type Role = {
            roleId: string;
            roleName: string;
            roleDisplay: string;
        };
        export type UserProfile = {
            teamName: string | null;
            teamId: string | null;
            roles: Array<string>;
            dnNumber: string;
            isExtension: boolean;
            usesOtherDN: boolean;
            extensionNumber: string;
            dialNumberValueForNonUS: string;
            isInternational: boolean;
            phoneNumber: string;
            countryCallingCode: string;
            countryCodeValue: string;
            isRememberMyCredentials: boolean;
            deviceType?: Service.Aqm.Agent.DeviceType;
            isEmergencyModalAlreadyDisplayed?: boolean;
        };
        export type OptionMember = {
            [key: string]: string;
        };
        export type SecureData = {
            data: Record<string, string>;
        };
    }
}
//# sourceMappingURL=conf-service.d.ts.map