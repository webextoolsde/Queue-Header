import { Service } from "../../index";
import Emm = Service.Emm;
export declare function emmService(): {
    fetchContent: (p: {
        orgId: string;
        taskId: string;
    }, cb?: ((res: any) => void | Emm.EmailContent) | undefined) => Promise<Emm.EmailContent>;
    fetchEmailContentFromEmm: (p: string, cb?: ((res: any) => void | Emm.EmailStorageContent) | undefined) => Promise<Emm.EmailStorageContent>;
    fetchReplyTemplate: (p: {
        orgId: string;
    }, cb?: ((res: any) => void | Emm.EmailTemplate) | undefined) => Promise<Emm.EmailTemplate>;
    downloadAttachment: (p: {
        resourceUrl: string;
    }, cb?: ((res: any) => void | {}) | undefined) => Promise<{}>;
    addAttachment: (p: {
        orgId: string;
        taskId: string;
        data: any;
    }, cb?: ((res: any) => void | Emm.OutBoundAttachments) | undefined) => Promise<Emm.OutBoundAttachments>;
    deleteAttachment: (p: {
        resourceUrl: string;
    }, cb?: ((res: any) => void | Emm.EmailContent) | undefined) => Promise<Emm.EmailContent>;
    sendEmail: (p: {
        orgId: string;
        taskId: string;
        data: any;
    }, cb?: ((res: any) => void | Emm.EmailContent) | undefined) => Promise<Emm.EmailContent>;
};
type emmErrorIds = "Service.emm.fetchContent" | "Service.emm.sendEmail" | "Service.emm.downloadAttachment" | {
    "Service.emm.addAttachment": Emm.Failure;
} | "Service.emm.deleteAttachment" | "Service.emm.fetchReplyContent";
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.emm": emmErrorIds;
        }
    }
}
declare module "../../index" {
    namespace Service.Emm {
        type Content = {
            emailContent: string;
            subject: string;
            toAddress: Array<string>;
            ccAddress: Array<string>;
            userEmailId: string;
            contentType: string;
            date: string;
            replyToAddress: string;
            messageId: string;
            from: string;
            inboundTranscript: string;
            inReplyTo?: string;
            references?: string;
        };
        type Failure = {
            axiosError: any;
        };
        type OutboundContent = {
            body: string;
            outboundReplyToAddress: string;
            outboundToAddress: string;
            outboundSubject: string;
            outboundFromAddress: string;
            outboundCcAddress: string;
            outboundContentType: string;
            outboundTranscript: string;
        };
        type AttachmentInfo = {
            maxAttachmentSizeInMB: string;
            attachmentLimit: string;
        };
        type InteractionContext = {
            content: Content;
            incomingAttachments?: IncomingAttachment[];
            outboundAttachments?: OutBoundAttachments[];
            outboundContent?: OutboundContent;
        };
        type EmailContent = {
            interactionContext: InteractionContext;
            attachmentInfo?: AttachmentInfo;
            storageName: StorageName;
        };
        type EmailTemplate = {
            defaultValues: DefaultTemplateValues;
            emailTemplate: string;
        };
        type DefaultTemplateValues = {
            defaultTypeCustomer: string;
            defaultTypeForCustomer: boolean;
            defaultTypeAgent: string;
            defaultTypeForAgent: boolean;
        };
        type IncomingAttachment = {
            size?: number;
            fileName: string;
            contentType: string;
            messageId?: string;
            resourceUrl: string;
            isCompliant?: boolean;
            storageName?: StorageName;
        };
        type OutBoundAttachments = {
            size?: number;
            fileName?: string;
            contentType?: string;
            resourceUrl?: string;
            location?: string;
        };
        type EmailStorageContent = {
            metaInfo: string;
            body: string;
        };
        type StorageName = "emm" | "s3";
    }
}
export {};
//# sourceMappingURL=emm-service.d.ts.map