export declare class FeatureFlagService {
    private splitio;
    private splitClient;
    readonly orgId: string;
    private callDropSummaryEnabled;
    private virtualAgentSummaryEnabled;
    private wellnessBreakConfigEnabled;
    private realTimeTranscriptionConfigEnabled;
    private suggestedResponsesConfigEnabled;
    initSplitioSdk(orgId: string, authorizationKey?: string): Promise<SplitIO.IClient>;
    isVideoEnabled(): boolean;
    isCareAttachmentEnabled(): boolean;
    isDigitalFFEnabled(): boolean;
    isPCIComplianceEnabled(): boolean;
    isDesktopReasonCodeEnabled(): boolean;
    isIMIChatEnabled(): boolean;
    isSteeringDigitsAppendEnabled(): boolean;
    isTahoeEnabled(): boolean;
    isCJDSEnabled(): boolean;
    isSecureCADVariablesEnabled(): boolean;
    private isFeatureEnabled;
    isDesktopConsumeWelcomeEnabled(): boolean;
    isCanaryOrg(): boolean;
    isLogRocketEnabled(): boolean;
    isLogRocketMaskingDisabled(): boolean;
    isIMIGlobalVariablesEnabled(): boolean;
    isGlobalVariablesEnabled(): boolean;
    isDesktopConsultToEntryPointDnEnabled(): boolean;
    isDesktopMaxSessionLimitsEnabled(): boolean;
    isCallbackRetryEnabled(): boolean;
    isWebRTCEnabled(): boolean;
    isDesktopManagedFilterInfScrollingEnabled(): boolean;
    isWebRTCSupervisorEnabled(): boolean;
    isProgressiveCampaignEnabled(): boolean;
    isProgressiveCampaign1NEnabled(): boolean;
    isSignoutBySupervisorEnabled(): boolean;
    isDesktopMaerskEnhancementEnabled(): boolean;
    isESDPostInteractionInsightsEnabled(): boolean;
    isDesktopMaerskAcqueonTeamId(): boolean;
    isDesktopCpdViewEnabled(): boolean;
    isAddressBookInfiniteScrollEnabled(): boolean;
    isSDKCallingInfoLevelLogsEnabled(): boolean;
    isDesktopMSStateSyncEnabled(): boolean;
    isDesktopAuxCodesInfiniteScrollEnabled(): boolean;
    isDesktopWebexStateSyncEnabled(): boolean;
    isDesktopEmergencyNotificationEnabled(): boolean;
    isWebrtcRingingEnabled(): boolean;
    isWebrtcEndCallEnabled(): boolean;
    isRecordingsRicherMetadataEnabled(): boolean;
    isWxccMultiPartyConfEnabled(): boolean;
    isDesktopConferenceRecordingEnabled(): boolean;
    isWxccPersistCallEnabled(): boolean;
    updateRealTimeTranscriptEnablement(isRealTimeTranscriptionEnabled: boolean): void;
    updateSuggestedResponsesEnablement(isSuggestedResponsesEnabled: boolean): void;
    updateAiFeatureFlags(isCallDropSummaryEnabled: boolean, isVirtualAgentSummaryEnabled: boolean, isWellnessBreakEnabled: boolean): void;
    isAiAssistantEnabled(): boolean;
    isCallDropSummaryEnabled(): boolean;
    isVirtualAgentSummaryEnabled(): boolean;
    isWellnessBreakClientEnabled(): boolean;
    isQMWShowConsultRecordingsEnabled(): boolean;
    showSignedOutAgents(): boolean;
    isAutoCSATEnabled(): boolean;
    isMomentumV2Enabled(): boolean;
    isVisualRebrandNewLookToggleEnabled(): boolean;
    isWxccAllowOutdialCallAlwaysEnabled(): boolean;
    isAgentPerformanceTabEnabled(): boolean;
    isQueueStatsTabEnabled(): boolean;
    isQueueStatsDetailViewEnabled(): boolean;
    isInteractionsPageEnabled(): boolean;
    isWebexDirectoryViewEnabled(): boolean;
    isMaskSensitiveDataFFEnabled(): boolean;
    isAllowConfTransferToEpDnEnabled(): boolean;
    isOutdialOrgSearchEnabled(): boolean;
    isConfirmDialogEnabled(): boolean;
    isUsingReachableEndpoint(): boolean;
    isJssdkMisuseMetricsEnabled(): boolean;
    isAiAssistantV2Enabled(): boolean;
    isWxccPostCallEnabled(): boolean;
    isRecordingTranscriptionEnabled(): boolean;
    isWxccDesktopQMEvaluationsEnabled(): boolean;
    isRealTimeTranscriptionEnabled(): boolean;
    isSuggestedResponsesEnabled(): boolean;
    isWxccRonaEnhancementsEnabled(): boolean;
    isTaskListV2Enabled(): boolean;
    isDigitalChannelCherryPickEnabled(): boolean;
    isTaskListOnlyVisibleOnTabEnabled(): boolean;
    isInteractionsViewActionsColumnEnabled(): boolean;
    isWxccScheduledCallBackEnabled(): boolean;
    isWxccAgentStatisticsByQueueEnabled(): boolean;
    isAgentBasedQueueManagementEnabled(): boolean;
    /**
     * Check if the feature flag is enabled
     * @param featureFlag The name of the feature flag
     * @returns true if the feature flag is enabled, false otherwise
     */
    isFeatureFlagEnabled(featureFlag: string): boolean;
}
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.featureflag": "Service.featureflag.fetchFeatureFlags";
        }
    }
}
//# sourceMappingURL=feature-flag-service.d.ts.map