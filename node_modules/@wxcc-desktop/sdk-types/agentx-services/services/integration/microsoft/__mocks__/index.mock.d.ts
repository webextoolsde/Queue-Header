/// <reference types="jest" />
export declare const acquireTokenMockResponse: {
    authority: string;
    uniqueId: string;
    tenantId: string;
    scopes: string[];
    account: {
        homeAccountId: string;
        environment: string;
        tenantId: string;
        username: string;
        localAccountId: string;
        name: string;
    };
    idToken: string;
    accessToken: string;
    fromCache: boolean;
    expiresOn: string;
    correlationId: string;
    requestId: string;
    extExpiresOn: string;
    familyId: string;
    tokenType: string;
    state: string;
    cloudGraphHostName: string;
    msGraphHost: string;
    fromNativeBroker: boolean;
};
export declare const PublicClientApplicationInitialize: {
    isBrowserEnvironment: boolean;
    initialize: jest.Mock<any, any>;
    getAllAccounts: jest.Mock<any, any>;
    config: {
        auth: {
            clientId: string;
            authority: string;
            knownAuthorities: never[];
            cloudDiscoveryMetadata: string;
            authorityMetadata: string;
            redirectUri: string;
            postLogoutRedirectUri: string;
            navigateToLoginRequestUrl: boolean;
            clientCapabilities: never[];
            protocolMode: string;
            azureCloudOptions: {
                azureCloudInstance: number;
                tenant: string;
            };
            skipAuthorityMetadataCache: boolean;
        };
        cache: {
            cacheLocation: string;
            temporaryCacheLocation: string;
            storeAuthStateInCookie: boolean;
            secureCookies: boolean;
            cacheMigrationEnabled: boolean;
            claimsBasedCachingEnabled: boolean;
        };
        system: {
            tokenRenewalOffsetSeconds: number;
            preventCorsPreflight: boolean;
            loggerOptions: {};
            networkClient: {};
            navigationClient: {};
            loadFrameTimeout: number;
            windowHashTimeout: number;
            iframeHashTimeout: number;
            navigateFrameWait: number;
            redirectNavigationTimeout: number;
            asyncPopups: boolean;
            allowRedirectInIframe: boolean;
            allowNativeBroker: boolean;
            nativeBrokerHandshakeTimeout: number;
            pollIntervalMilliseconds: number;
            cryptoOptions: {
                useMsrCrypto: boolean;
            };
        };
        telemetry: {
            application: {
                appName: string;
                appVersion: string;
            };
        };
    };
    initialized: boolean;
    logger: {
        level: number;
        piiLoggingEnabled: boolean;
        correlationId: string;
        packageName: string;
        packageVersion: string;
    };
    networkClient: {};
    navigationClient: {};
    redirectResponse: {};
    hybridAuthCodeResponses: {};
    activeSilentTokenRequests: {};
};
export declare const fetchUserPresenceMockResponse: {
    "@odata.context": string;
    value: {
        "@odata.type": string;
        id: string;
        availability: string;
        activity: string;
        statusMessage: null;
    }[];
};
export declare const fetchUserPresenceMockPayload: {
    requestData: {
        ids: string[];
    };
};
export declare const selectUsersParameters: string[];
export declare const presenceServiceResponse: {
    services: {
        serviceName: string;
        logicalNames: string[];
        serviceUrls: {
            baseUrl: string;
            priority: number;
        }[];
        internalServiceUrls: never[];
        ttl: number;
        id: string;
    }[];
    format: string;
};
export declare const exchangeTokenResponse: {
    access_token: string;
    refresh_token: string;
    id_token: string;
    expires_in: string;
    scope: string;
    token_type: string;
};
export declare const renewTokenJabberResponse: {
    access_token: string;
    refresh_token: string;
    id_token: string;
    expires_in: string;
    scope: string;
    token_type: string;
};
export declare const fetchUsers: {
    "@odata.context": string;
    "@odata.count": number;
    "@odata.nextLink": string;
    value: ({
        id: string;
        userPrincipalName: string;
        businessPhones: string[];
        department: null;
        displayName: string;
        jobTitle: null;
    } | {
        id: string;
        userPrincipalName: string;
        businessPhones: string[];
        department: string;
        displayName: string;
        jobTitle: string;
    })[];
};
export declare const mockValidIdToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";
//# sourceMappingURL=index.mock.d.ts.map