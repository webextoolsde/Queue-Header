import { Err as UUIPErr } from "@uuip/unified-ui-platform-sdk";
import { AxiosError } from "axios";
import { InteractionsServiceTypes } from "./interactions-service.types";
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            Interactions: InteractionsErrorIds;
        }
    }
}
export interface ErrDetails {
    trackingId: string;
    msg: string;
    statusCode: number;
    retryAfter: string;
}
export type InteractionsErrorIds = {
    "Service.interactions.fetchInteractions": ErrDetails;
};
export declare function createErrDetailsObjectWithStatusCode(errObj: AxiosError<string>, errorKey: keyof InteractionsErrorIds | undefined): UUIPErr.Details<"Service.reqs.generic.failure" | "Service.interactions.fetchInteractions">;
export declare class InteractionsSearchApi {
    private readonly http;
    fetchCompletedInteractions(params: InteractionsServiceTypes.FetchInteractionsParams, callback: InteractionsServiceTypes.PollingCallback): Promise<InteractionsServiceTypes.CompletedResponse>;
    /**
     * @throws {Error} When callback is not provided
     * @throws {UUIPErr.Details} When the interaction service request fails
     */
    startQueuedPolling(callback: InteractionsServiceTypes.PollingCallback, sortBy?: InteractionsServiceTypes.SortBy, filters?: InteractionsServiceTypes.Filters): Promise<InteractionsServiceTypes.PollingResponse>;
    private buildQueryTypeFilters;
    private buildUserSelectedFilters;
    private buildFilterObject;
    private buildQuery;
    private fetchInteractions;
    private readonly createFetchMoreFunc;
}
//# sourceMappingURL=interactions-service-search.d.ts.map