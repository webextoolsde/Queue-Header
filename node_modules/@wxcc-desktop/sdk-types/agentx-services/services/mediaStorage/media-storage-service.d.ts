import { AxiosError } from "axios";
import { Service } from "../../index";
import MediaStorageType = Service.MediaStorage;
export declare class MediaStorage {
    private readonly http;
    private readonly metaDataErrorId;
    private readonly fetchMetaData;
    private readonly fetchConversation;
    private readonly getFlatParams;
    private readonly parseConversations;
    fetchIVRTranscript: (orgId: string, interactionId: string, timeoutMins: number) => Promise<MediaStorageType.IvrConversations>;
    fetchStorageEmailContent: (url: string) => Promise<Service.Emm.EmailStorageContent>;
    private readonly getStorageUrl;
    downloadStorageAttachment: (url: string) => Promise<"arraybuffer">;
}
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.mediaStorage": {
                "Service.mediaStorage.metaData": MediaStorageType.Failure;
            } | {
                "Service.mediaStorage.conversation": MediaStorageType.Failure;
            };
        }
    }
}
declare module "../../index" {
    namespace Service.MediaStorage {
        type MetaData = {
            orgId: string;
            interactionId: string;
            timeOutMins: number;
            transcripts: Array<TranscriptMetaData>;
        };
        type TranscriptMetaData = {
            transcriptId: string;
            startTime: number;
            stopTime: number;
            cvaId: string;
            botName: string;
            transcriptPath: string;
        };
        type IvrTranscriptData = {
            conversation: IvrConversations;
        };
        type IvrConversations = Array<Transcript>;
        type Transcript = {
            customer?: CustomerTranscript;
            bot?: BotTranscript;
        };
        type CustomerTranscript = {
            query: string;
            sentiment: number;
            timestamp: number;
        };
        type BotTranscript = {
            timestamp: number;
            confidence: number;
            reply: string;
            intentName?: string;
            parameters?: BotTranscriptParams;
            intentId?: string;
            botName?: string;
        };
        type Failure = {
            axiosError: AxiosError["response"];
        };
        type BotTranscriptParams = any;
        type preSignedData = {
            preSignedUrl: string;
        };
    }
}
//# sourceMappingURL=media-storage-service.d.ts.map