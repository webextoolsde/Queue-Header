import { Err } from "@uuip/unified-ui-platform-sdk";
import { AxiosError } from "axios";
export type ErrorDetails = ReturnType<typeof getCommonErrorDetails>;
declare const getCommonErrorDetails: (errObj: AxiosError<string>) => {
    trackingId: any;
    msg: string | undefined;
};
export declare const createErrDetailsObject: (errObj: AxiosError<string>) => Err.Details<"Service.reqs.generic.failure">;
export declare const handleExternalServiceErrorDetails: (errObj: AxiosError<string>) => Err.Details<any>;
export declare const createErrDetailsObjectWithRetry: (errObj: AxiosError<string>, errorKey?: string) => Err.Details<any>;
export declare const getCanaryFlagFromSessionStorage: () => boolean;
/**
 * Pings an API and checks if API is returning 200 or not
 * In localhost pings GET method and HEAD method otherwise
 * @returns onlineStatus
 */
export declare const checkOnlineStatus: () => Promise<boolean>;
export declare const generateUUID: () => string;
export declare const RETRY_INTERVAL = 200;
export declare const sleep: (interval: number) => Promise<unknown>;
export declare const formatStringsForLogs: (logs: string) => string;
export {};
//# sourceMappingURL=service-utils.d.ts.map