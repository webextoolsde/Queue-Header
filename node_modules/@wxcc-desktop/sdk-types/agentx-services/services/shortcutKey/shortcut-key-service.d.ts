import { Service } from "../..";
type ShortcutKeyModifiers = "ctrlKey_shiftKey" | "altKey_shiftKey" | "ctrlKey_altKey" | "shiftKey" | "ctrlKey" | "altKey" | string;
export declare class ShortcutKeyService {
    private readonly convertToShortcutStoreObject;
    validateModifierKeys(modifierKeys?: string): boolean;
    registeredKeys: {
        EXPAND_COLLAPSE_INTERACTION_KEY: string;
        SAVE_EDITED_CAD_KEY: string;
        REVERT_EDITED_CAD_KEY: string;
        HOLD_RESUME_CALL_KEY: string;
        TRANSFER_KEY: string;
        CONSULT_KEY: string;
        END_KEY: string;
        CONFERENCE_KEY: string;
        PAUSE_RESUME_RECORDING_KEY: string;
        GO_TO_AVIALABLE_KEY: string;
        OPEN_STATE_SELECTOR_KEY: string;
        SEND_EMAIL_KEY: string;
        REPLY_EMAIL_KEY: string;
        REPLY_ALL_EMAIL_KEY: string;
        ATTACH_FILE_IN_EMAIL_KEY: string;
        OPEN_USER_PROFILE_KEY: string;
        ENABLE_SILENT_NOTIFICATION_KEY: string;
        OPEN_SHORTCUT_KEY_MODAL_KEY: string;
        DOWNLOAD_ERROR_REPORT_KEY: string;
        SIGNOUT_KEY: string;
        ACCEPT_TASK_KEY: string;
        SWITCH_POPOVER_KEY: string;
        EXPAND_COLLAPSE_POPOVER_KEY: string;
        OPEN_OUTDIAL_KEY: string;
        OPEN_WRAP_UP_KEY: string;
        EXPAND_COLLAPSE_TASK_LIST_KEY: string;
        OPEN_NOTIFICATION_CENTER_KEY: string;
        OPEN_NAVIGATION_TAB_KEY: string;
        OPEN_HELP_KEY: string;
        REFRESH_KEY: string;
        SWITCH_TASK_KEY: string;
        ACCEPT_ALL_TASK_KEY: string;
        EXPAND_COLLAPSE_WEBEX: string;
        MINIMIZE_RESTORE_WEBEX: string;
        OPEN_DTMF_KEYPAD: string;
    };
    validateShortcutKeys: (keys: Service.ShortcutKey.RegisterShortcutKeys) => Service.ShortcutKey.ShortcutKeyStore[];
}
declare module "../../index" {
    namespace Service.ShortcutKey {
        type ERegisterShortcutKeys = {
            detail: ShortcutKeyStore[];
        };
        type EShortcutKeyMatch = {
            detail: ShortcutKeyStore;
        };
        type EKeyboardShortcut = {
            detail: boolean;
        };
        type RegisterShortcutKeys = ShortcutKeyParam[];
        type ShortcutKeyParam = {
            componentName: string;
            modifierKeys?: ShortcutKeyModifiers | string;
            key: string;
            actionName: string;
        };
        type ShortcutKeyStore = ShortcutKeyParam & {
            id: string;
            modifierKeys: ShortcutKeyModifiers | string;
            isConflict?: boolean;
        };
        type ShortcutKeyPressedEvent = ShortcutKeyStore & {
            timestamp: number;
        };
    }
}
export {};
//# sourceMappingURL=shortcut-key-service.d.ts.map