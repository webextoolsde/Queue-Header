import { Service } from "../../index";
import KeyInfo = Service.shortcut.KeyInfo;
import EKeyInfo = Service.shortcut.EKeyInfo;
export declare function shortcutKeyService(): {
    event: {
        listenKeyPress: (cb: (data: Service.shortcut.EKeyInfo) => void) => any;
        listenKeyConflict: (cb: (data: Service.shortcut.EKeyInfo) => void) => () => boolean;
        listenConflictResolved: (cb: () => void) => () => boolean;
    };
    register: (keys: KeyInfo[]) => void;
    updateRegisterKeys: () => void;
    getRegisteredKeys: () => Map<string, KeyInfo>;
    unregisterAllKeys: () => void;
    /**
     * This needs to be called by 3rd party widgets on unmount.
     * WidgetElement name should be same as in used for registering shortcut keys
     */
    unregisterKeys: (widgetElement: string) => void;
    DEFAULT_SHORTCUT_KEYS: {
        [key: string]: KeyInfo[];
    };
    MODIFIERS: {
        CTRL_SHIFT: string;
        ALT_SHIFT: string;
        CTRL_ALT: string;
        SHIFT: string;
        CTRL: string;
        ALT: string;
    };
    REGISTERED_KEYS: {
        EXPAND_COLLAPSE_INTERACTION_PANEL_KEY: string;
        SAVE_EDITED_CAD_KEY: string;
        REVERT_EDITED_CAD_KEY: string;
        HOLD_RESUME_CALL_KEY: string;
        TRANSFER_KEY: string;
        CONSULT_KEY: string;
        END_KEY: string;
        CONFERENCE_KEY: string;
        PAUSE_RESUME_RECORDING_KEY: string;
        GO_TO_AVAILABLE_KEY: string;
        OPEN_STATE_SELECTOR_KEY: string;
        SEND_EMAIL_KEY: string;
        REPLY_EMAIL_KEY: string;
        REPLY_ALL_EMAIL_KEY: string;
        OPEN_USER_PROFILE_KEY: string;
        ENABLE_SILENT_NOTIFICATION_KEY: string;
        OPEN_SHORTCUT_KEY_MODAL_KEY: string;
        DOWNLOAD_ERROR_REPORT_KEY: string;
        SIGNOUT_KEY: string;
        ACCEPT_TASK_KEY: string;
        SWITCH_POPOVER_KEY: string;
        EXPAND_COLLAPSE_POPOVER_KEY: string;
        OPEN_OUTDIAL_KEY: string;
        OPEN_WRAP_UP_KEY: string;
        EXPAND_COLLAPSE_TASK_LIST_PANEL_KEY: string;
        OPEN_NOTIFICATION_CENTER_KEY: string;
        OPEN_NAVIGATION_TAB_KEY: string;
        REFRESH_KEY: string;
        SWITCH_TASK_KEY: string;
        ACCEPT_ALL_TASK_KEY: string;
        EXPAND_COLLAPSE_WEBEX: string;
        MINIMIZE_RESTORE_WEBEX: string;
        OPEN_DTMF_KEYPAD: string;
    };
};
declare module "../../index" {
    namespace Service.shortcut {
        type KeyInfo = {
            /** widgetElement must be the MFE/widget's tag ext. agentx-react-out-dial-wrapper, agentx-react-chat etc.
             * This widget element must match with the component provided in the layout config .
             * widgetElement need to to resolve conflicts.
             * */
            widgetElement: string;
            group: string;
            modifierKeys: string;
            action: string;
            key: string;
            role: string;
            listenKeyPress?: (event: EKeyInfo) => void;
            isConflict?: boolean;
            deviceType?: string;
        };
        type EKeyInfo = {
            type: string;
            data?: KeyInfo;
            keyboardEvent?: KeyboardEvent;
        };
    }
}
//# sourceMappingURL=shortcutkey-service.d.ts.map