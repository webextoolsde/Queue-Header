import { Service } from "../../index";
export declare function tahoeService(): {
    fetchAgentHistory: (p: {
        agentId: string;
    }, cb?: ((res: any) => void | Service.Tahoe.HistoryByANI) | undefined) => Promise<Service.Tahoe.HistoryByANI>;
    fetchInteractionHistory: (p: {
        ani: string;
        startTime: number;
        endTime: number;
        agentId: string;
        interactionId: string;
    }, cb?: ((res: any) => void | Service.Tahoe.HistoryByANI) | undefined) => Promise<Service.Tahoe.HistoryByANI>;
};
type tahoeErrorIds = "Service.tahoe.fetchTahoeHistory" | "Service.tahoe.fetchInteractionHistory";
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.tahoe": tahoeErrorIds;
        }
    }
}
declare module "../../index" {
    namespace Service.Tahoe {
        type HistoryData = {
            data: {
                task: {
                    pageInfo: PageInfo;
                    tasks: TaskMap[];
                };
            };
        };
        type HistoryDataTaskDetails = {
            data: {
                taskDetails: {
                    pageInfo: PageInfo;
                    tasks: TaskMap[];
                };
            };
        };
        type HistoryByANI = {
            contacts: ContactTahoe[];
        };
        type ContactTahoe = {
            cstts: string;
            cetts: string;
            talkDuration: number;
            agentName?: string;
            entrypointName?: string;
            channelType: string;
            ani: string;
            sid: string;
            transcript?: string;
            outboundTranscript?: string;
            terminationType?: string;
            subject?: string;
            customerName: string;
            dnis: string;
            callDirection: string;
            subChannelType?: string;
            wrapUpCode?: string;
            outDialType?: string;
            isCallback?: boolean;
        };
        type PageInfo = {
            hasNextPage: boolean;
            endCursor: string;
        };
        type Owner = {
            name: string;
        };
        type Customer = {
            name: string;
        };
        type EntryPointMap = {
            name: string;
        };
        type LastEntryPointMap = {
            name: string;
        };
        type TaskPropertyMap = {
            name: string;
        };
        type TaskMap = {
            owner: Owner;
            origin: string;
            id: string;
            lastEntryPoint: LastEntryPointMap;
            createdTime: number;
            endedTime: number;
            channelType: string;
            channelSubType: string;
            terminationType: string;
            connectedDuration: number;
            channelMetaData: any;
            customer: Customer;
            destination: string;
            direction: string;
            lastWrapupCodeName: string;
            isCallback: boolean;
        };
    }
}
export {};
//# sourceMappingURL=tahoe-service.d.ts.map