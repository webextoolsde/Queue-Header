/// <reference types="jest" />
import { Service } from "../../index";
export declare const mockMessage: {
    data: {
        personEmail: string;
        text: string;
        html: string;
        time: string;
        roomTtpe: string;
    };
};
export declare const mockStatusResponse: Service.Webex.WebexUserStatusResponse;
export declare const presenceEvent: jest.Mock<any, any>;
export declare const mockPresence: jest.Mock<any, any>;
export declare const mockAddedEvent: Service.Webex.AddedMeetingEvent;
export declare const mockRemoveEvent: Service.Webex.RemovedEvent;
export declare const meetingRegister: jest.Mock<any, any>;
export declare const deviceRegister: jest.Mock<any, any>;
export declare const deviceUnegister: jest.Mock<any, any>;
export declare const mercuryConnect: jest.Mock<any, any>;
export declare const messageListener: jest.Mock<any, any>;
export declare const dssRegister: jest.Mock<any, any>;
export declare const dssUnregister: jest.Mock<any, any>;
export declare const webexRequest: jest.Mock<any, any>;
export declare const dssSearch: jest.Mock<any, any>;
export declare const membershipListener: jest.Mock<any, any>;
export declare const roomsReadListener: jest.Mock<any, any>;
export declare const subscribeForPresence: jest.Mock<any, any>;
export declare const stopListeningForPresence: jest.Mock<any, any>;
export declare const presenceInitResponse: {
    get: jest.Mock<any, any>;
    initialize: jest.Mock<any, any>;
    setStatus: jest.Mock<any, any>;
    enqueue: jest.Mock<any, any>;
    dequeue: jest.Mock<any, any>;
    on: jest.Mock<any, any>;
};
export declare const webexInitResponse: {
    once: jest.Mock<any, any>;
    messages: {
        listen: jest.Mock<any, any>;
        on: jest.Mock<any, any>;
    };
    meetings: {
        registered: boolean;
        register: jest.Mock<any, any>;
        syncMeetings: jest.Mock<any, any>;
        getAllMeetings: jest.Mock<any, any>;
        on: jest.Mock<any, any>;
    };
    internal: {
        presence: {
            get: jest.Mock<any, any>;
            initialize: jest.Mock<any, any>;
            setStatus: jest.Mock<any, any>;
            enqueue: jest.Mock<any, any>;
            dequeue: jest.Mock<any, any>;
            on: jest.Mock<any, any>;
        };
        device: {
            registered: boolean;
            register: jest.Mock<any, any>;
            unregister: jest.Mock<any, any>;
            on: jest.Mock<any, any>;
        };
        mercury: {
            connected: boolean;
            mercuryTimeOffset: number;
            connect: jest.Mock<any, any>;
            on: jest.Mock<any, any>;
        };
        dss: {
            registered: boolean;
            register: jest.Mock<any, any>;
            unregister: jest.Mock<any, any>;
            search: jest.Mock<any, any>;
            lookup: jest.Mock<any, any>;
            lookupByEmail: jest.Mock<any, any>;
        };
        support: {
            submitLogs: jest.Mock<any, any>;
        };
        feature: {
            getFeature: jest.Mock<any, any>;
        };
    };
    rooms: {
        listWithReadStatus: jest.Mock<any, any>;
    };
    memberships: {
        listen: jest.Mock<any, any>;
        on: jest.Mock<any, any>;
    };
    people: {
        get: jest.Mock<any, any>;
    };
    request: jest.Mock<any, any>;
};
//# sourceMappingURL=webex-mock.d.ts.map