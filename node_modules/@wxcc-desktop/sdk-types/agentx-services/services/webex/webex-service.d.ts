import { Signal } from "@uuip/unified-ui-platform-sdk";
import "@webex/internal-plugin-dss";
import { NewMetrics } from "@webex/internal-plugin-metrics";
import { Service } from "../../index";
export declare class WebexService {
    private readonly accessToken;
    private readonly newMessageSignal;
    private readonly newMeetingEventSignal;
    private readonly newPresenceEventSignal;
    private readonly newWebexChatActionDone;
    private readonly wdmRegistrationEvent;
    onNewMessage: Signal.WithData<Service.Webex.NewMessage>;
    onNewMeetingEvent: Signal.WithData<Service.Webex.NewMeetingEvent>;
    onNewPresenceEvent: Signal.WithData<Service.Webex.NewPresenceEvent>;
    onWebexChatActionDone: Signal.WithData<Service.Webex.WebexChatEvent>;
    onWdmRegistrationEvent: Signal.Empty;
    private readonly notificationCountUpdateSignal;
    onNotificationCountUpdate: Signal.WithData<number>;
    private readonly onNewPresenceStateSyncEventSignal;
    onNewPresenceStateSyncEvent: Signal.WithData<Service.Webex.NewPresenceStateSyncEvent>;
    newMetrics?: NewMetrics;
    private readonly presenceUpdateSignal;
    onPresenceUpdateEvent: Signal.WithData<Service.Webex.Presence[]>;
    private webex;
    private mercury;
    private device;
    private dss;
    private presence;
    private support;
    private timeout;
    private webexInitialized;
    private deviceRegisterRetry;
    private mercuryConnectRetry;
    private webexNotificationErrorCount;
    private loggedServerTimeOffset;
    private presences;
    private readonly crossClientState;
    webexInitializedStatus(): boolean;
    getFeatureFlag(name: string): Promise<boolean>;
    private readonly maxWebexNotificationErrorCount;
    registerWebex(isProd: boolean): Promise<any>;
    registerWebexEvents(): void;
    private listenForEvents;
    private registerWebexMeeting;
    unregisterWebex(): Promise<void>;
    private poleWebexStatus;
    webexRequest(method: string, service: string, resource: string, body?: any): Promise<any>;
    getUserStatusForWebex(agentId: string | undefined): void;
    getPresenceStatus(agentId: string | undefined): Promise<void>;
    updateWebexMeeting(): void;
    private getCurrentMeeting;
    private parseMessage;
    private fetchPersonData;
    fetchPersonDataByEmail(personEmail: string): Promise<any>;
    handleWebexMessageEvents(): void;
    private readonly getStartTimeInMinute;
    private listenForIncomingMeetings;
    fetchUnreadConversationCount(): void;
    sendMessage(toPersonEmail: string, text: string): Promise<boolean>;
    handleUnreadConversations(): void;
    stopListeningForPresenceUpdates(contactIds: string[]): void;
    initialisePresencePlugin(): void;
    subscribeForPresenceUpdates(contactIds: string[]): void;
    private hasPresenceStatus;
    private parsePresenceUpdate;
    private listenForPresenceUpdates;
    private readonly dispatchMercuryEvent;
    private retryMercuryRegister;
    registerToDSS(): Promise<void>;
    private formatTimeDifference;
    canGetServerTime(): boolean;
    getServerTime(): Date;
    private registerToMercury;
    private subscribeStateSync;
    private subscribeToWebexCallingEvents;
    private dispatchWebexCallMuteStateChangedEvent;
    private dispatchWebexCallHoldStateChangedEvent;
    registerPresenceSync(agentId: string): Promise<void>;
    registerWebexCallingEvents(agentId: string): Promise<void>;
    setStatus(status: Service.Webex.PresenceStatus, ttl: number): Promise<void>;
    private parseUser;
    lookupUsers(ids: string[]): Promise<Service.Webex.User[]>;
    lookupUsersByEmail(emails: string[]): Promise<Service.Webex.User[]>;
    searchUsers(query: string, resultSize: number): Promise<Service.Webex.User[]>;
    updateAnswerCallsSetting(userId: string, state: boolean): Promise<any>;
    private readonly pendingFeedbackIdKey;
    private isUploadingLogs;
    uploadLogsToWebex: (feedbackId: string) => void;
    uploadLogs(): string;
    uploadPendingLogs(): void;
    private updateAnswerCallsCrossClient;
    private startRefreshTimer;
    private extractDeviceIdFromUrl;
    constructor(accessToken: string);
}
declare module "../../index" {
    namespace Service.Webex {
        type NewMessage = {
            sentBy: string;
            text: string;
            html: string;
            time: string;
            roomType: string;
            displayName: string;
            hasAttachments: boolean;
            id: string;
        };
        type NewMeetingEvent = {
            id: string;
            timeStamp: number;
            eventType: string;
            participantName: string;
            meetingType: "CALL" | "MEETING";
            isScheduledMeeting?: boolean;
            meetingInMinutes?: number;
        };
        type AddedMeetingEvent = {
            id: string;
            meeting: Meeting;
            type: string;
        };
        type RemovedEvent = {
            meetingId: string;
            reason: string;
        };
        type Meeting = {
            id: string;
            type: "CALL" | "MEETING";
            locusInfo: {
                fullState: {
                    lastActive: string;
                };
                host: {
                    name: string;
                };
                info: {
                    webExMeetingName: string;
                };
                scheduledMeeting: {
                    durationMinutes: number;
                    startTime: string;
                };
            };
            partner: {
                person: {
                    name: string;
                };
            };
        };
        type NewPresenceEvent = {
            eventType: string;
            status: string;
            meetingType?: string;
        };
        type NewPresenceStateSyncEvent = {
            data: {
                subject: string;
                category: string;
                status: string;
                eventType: string;
                meetingType?: string;
            };
            wsWriteTimestamp?: string;
        };
        type UpdatedCallMuteStateEvent = {
            data: {
                actorId: string;
                callId: string;
                muted: boolean;
            };
        };
        type UpdatedCallHoldStateEvent = {
            data: {
                actorId: string;
                callId: string;
                state: string;
            };
        };
        type PresenceData = {
            [id: string]: Service.Webex.Presence;
        };
        type Presence = {
            contactId: string;
            status: string;
            customStatus?: string;
            lastActiveTime: string;
            expiresTime?: string;
        };
        type WebexChatEvent = {
            status: boolean;
        };
        type WebexUserStatusResponse = {
            subject: string;
            status: string;
            expiresTTL: number;
            meetingType?: string;
        };
        type PresenceStatus = "call" | "meeting" | "presenting" | "dnd" | "active" | "unknown" | "inactive" | "busy" | "ooo" | string;
        type UserSource = "search" | "lookup";
        type User = {
            source: UserSource;
            displayName: string;
            userId: string;
            email: string;
            phoneNumber: string;
            avatarUrl: string;
            department: string;
            jobTitle: string;
            presence?: Presence;
        };
        type UserPhoto = {
            type: string;
            value: string;
        };
    }
}
//# sourceMappingURL=webex-service.d.ts.map