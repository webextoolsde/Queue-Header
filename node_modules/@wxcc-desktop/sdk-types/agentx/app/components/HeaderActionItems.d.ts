import { Service } from "@agentx/agentx-services";
import { LitElement, PropertyValues } from "lit-element";
type HTMLElementType = HTMLElement | null | undefined;
declare const HeaderWrapper_base: typeof LitElement & import("@/mixins/ResizeMixin").AnyConstructor<import("@/mixins/ResizeMixin").ResizeClass>;
export declare class HeaderWrapper extends HeaderWrapper_base {
    actionIcons: string[];
    isOutboundEnabledForTenant: boolean;
    isOutboundEnabledForAgent: boolean;
    getOutdialRegex: string;
    dnNumber: string;
    selectedOutdialANI: Service.Aqm.Agent.OutdialAni;
    outDialEp: string;
    isAdhocDialingEnabled: boolean;
    isActiveCall: boolean;
    isNotificationsEnabled: boolean;
    webexNotificationCount: number;
    notifications: import("@uuip/unified-ui-platform-sdk").Notifications.Service;
    header: import("@uuip/unified-ui-platform/dist/types/widgets/src/types").Page | null;
    outDialAni: Service.Aqm.Agent.OutDialAniData;
    addressBook: Service.Aqm.Agent.AddressBooksData;
    hasWidgets: boolean;
    webexEnabled: boolean;
    isDarkModeEnable: boolean;
    isAddressBookInfiniteScrollEnabled: boolean;
    isOutdialAniInfiniteScrollEnabled: boolean;
    isOutdialDisabledForExclusive: boolean;
    showDynamicWidget: boolean;
    isCallInProgress: boolean;
    webRtcStatus: string;
    static get styles(): import("lit-element").CSSResult;
    actionBar: HTMLDivElement;
    actionBarItems: HTMLLIElement[];
    overlayItems: HTMLLIElement[];
    dynamicAreaInMenu: HTMLElementType;
    dynamicAreaOutMenu: HTMLElementType;
    moreButton: HTMLDivElement;
    private actionItemMap;
    private stopListen;
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected firstUpdated(changedProperties: PropertyValues): Promise<void>;
    protected handleResize(): void;
    resizerEvent(): void;
    setDynamicWidgetVisibility(): void;
    setDisplay: (data: boolean[]) => void;
    switchColumnsToRows(): void;
    turnGridAround(currentGridAreas: string | undefined): string;
    renderActionElements(li: "li" | "md-list-item"): import("lit-element").TemplateResult;
    dynamicWidgets(inMenu?: boolean): import("lit-element").TemplateResult;
    render(): import("lit-element").TemplateResult;
}
export {};
