import { AgentXStore, Store } from "@/store";
import { Router } from "@uuip/unified-ui-platform";
export declare enum RouteName {
    TASK = "task",
    TASKPANEL = "task-panel",
    APS = "aps",
    QUEUES = "queues",
    METRICS = "metrics",
    Interactions = "interactions",
    AgentPerformance = "agent-performance",
    EvaluationsManager = "evaluations-manager",
    DEFAULT_HOME = "defaulthome",
    PlaywrightTest = "playwright-test"
}
export declare const RoutePath: {
    task: string;
    "task-panel": string;
    aps: string;
    queues: string;
    interactions: string;
    "agent-performance": string;
    metrics: string;
    "evaluations-manager": string;
    "playwright-test": string;
};
type AgentXAppRoutingConfig = {
    onRoutingUpdate?: () => Promise<unknown>;
};
declare class AgentXAppRouting {
    readonly STORE: AgentXStore;
    private readonly router;
    private mobxSyncReactionDispose;
    private readonly syncFromStoreToRouter;
    private readonly syncFromRouterToStore;
    private config?;
    private viewMapFactory;
    constructor(router: Router.Service, agentxStore: AgentXStore);
    private notifyRoutingUpdate;
    private findRemovedItems;
    private findNewlyAddedItems;
    private updateView;
    get view(): Router.RouterView.BlocksMap;
    start(config?: AgentXAppRoutingConfig): void;
    private readonly updateViewNotFound;
    stop(): void;
    navigate<DynamicRouteName extends string = never>(routeName: DynamicRouteName, routeValues: Router.RouteValues): Promise<void>;
    private isTaskrouteIsNotDefaultPath;
    private checkRouteNameExists;
    private isCurrentRouteExist;
    private isTaskRouteExists;
    addOrUpdateDynamicRoutes(cachedLayoutConfig?: Store.Dynamic.ConfigJson): Promise<void>;
    private syncRoutesWithServerUpdates;
    private handleAgentRole;
    private applyNavChanges;
    private handleNoHomePage;
    private handleDynamicNavigation;
    private handleRemoveRoutes;
}
export declare const createAgentXAppRouting: (agentxStore: AgentXStore) => AgentXAppRouting;
export {};
