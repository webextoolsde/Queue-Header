import { DynamicWidget, Router } from "@uuip/unified-ui-platform";
import { LitElement } from "lit-element";
import "../../components/HeaderActionItems";
import "../../components/advancedHeader/AgentStateSelectorWrapper";
import "../../components/advancedHeader/NotificationWrapper";
import "../../components/advancedHeader/OutdialWrapper";
import "../../components/advancedHeader/WebexWrapper";
type HTMLElementType = HTMLElement | null | undefined;
export declare class AgentDynamicHeader extends LitElement {
    advancedHeader: import("@uuip/unified-ui-platform/dist/types/widgets/src/types").Options[] | null;
    dynamicHeader: HTMLElementType;
    moreButton: HTMLElement;
    visibleLinks: HTMLElementType;
    hiddenLinks: HTMLElement;
    private readonly debouncedUpdateMenu;
    static get styles(): import("lit-element").CSSResult;
    availableSpace: any;
    DEFAULT_WIDGET_WIDTH: number;
    initialLoad: any;
    widgetWidths: any;
    BUFFER_SPACE: number;
    INITIALIZE_TIMEOUT: number;
    ESCAPE_KEY: string;
    connectedCallback(): void;
    disconnectedCallback(): void;
    init(): void;
    /**
     * returns value for computed style as a number
     * @param widget
     * @param property
     * @returns Number
     */
    getComputedStyleWithProperty(widget: Element, propertyKey: string): number | undefined;
    /**
     * calculates element width along with the margin left property
     * @param widget
     * @returns total width
     */
    getElemWidth(widget: Element): number;
    /**
     * This method calculates the total space occupied by widgets
     * eg. wd1=10, wd2=20, wd3=30, so it'll return 60 as total occupied space
     * @param widgets
     * @returns number
     */
    getWidgetTotalOccupiedSpace(widgets: HTMLCollection): any;
    /**
     * Stores the widths of <li>s being pushed to dropdown
     * Push the menu to dropdown
     * @param menuElementToPush
     */
    pushTheElementsToDropDown(menuElementToPush: Element): void;
    /**
     * Remove the last element from widths array
     * Brings the menu item back from dropdown to menu
     * @param dropDownElementToBringBack
     */
    pushTheElementsBackToMenuBar(dropDownElementToBringBack: Element): void;
    /**
     * Loops through visible links and updates menu bar and dropdown
     * @param visibleChildren
     */
    iterateThroughMenuItems(visibleChildren: HTMLCollection): void;
    /**
     * Gets triggered after very page resize event
     * Updates the menu bar with the count of children to be shown in header
     * vs count of children to be shown in dropdown menu
     * Compares the parent container's width as available space to the total space occupied
     * by the children <li>s
     */
    updateMenu: () => void;
    addBindings(): void;
    getAiAssistantComponent: (component: DynamicWidget.Options) => {
        comp: string;
        textContent: string;
        attributes: {
            orgId: string;
            agentId: string;
            agentName: string;
            darkTheme: string;
            aniId: string;
            isLoggedIntoStation: string;
            isCallDropSummaryEnabled: string;
            isVirtualAgentSummaryEnabled: string;
            isWellnessBreakEnabled: string;
            isRealTimeTranscriptionEnabled: string;
            isSuggestedResponsesEnabled: string;
        };
        script?: string | undefined;
        properties?: Record<string, any> | undefined;
        children?: import("@uuip/unified-ui-platform/dist/types/widgets/src/types").Options[] | undefined;
        style?: Partial<CSSStyleDeclaration> | undefined;
        visibility?: string | undefined;
        responsive?: boolean | undefined;
        wrapper?: {
            title: string;
            id?: string | undefined;
            maximizeAreaName: string;
        } | undefined;
    };
    getDynamicProperties(component: DynamicWidget.Options): {
        comp: string;
        script?: string | undefined;
        properties?: Record<string, any> | undefined;
        attributes?: Record<string, any> | undefined;
        children?: import("@uuip/unified-ui-platform/dist/types/widgets/src/types").Options[] | undefined;
        textContent?: string | undefined;
        style?: Partial<CSSStyleDeclaration> | undefined;
        visibility?: string | undefined;
        responsive?: boolean | undefined;
        wrapper?: {
            title: string;
            id?: string | undefined;
            maximizeAreaName: string;
        } | undefined;
    } | null;
    render(): import("lit-element").TemplateResult;
}
declare const AdvancedHeader: () => Router.RouterView.Block;
export default AdvancedHeader;
