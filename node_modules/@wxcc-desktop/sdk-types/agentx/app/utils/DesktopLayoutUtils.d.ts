import { Store } from "@/store";
import { Service } from "@agentx/agentx-services";
export declare const UserRoles: {
    AGENT: string;
    SUPERVISOR: string;
    SUPERVISOR_AGENT: string;
};
export declare const LayoutUserRoleKeys: {
    AGENT: string;
    SUPERVISOR: string;
    SUPERVISOR_AGENT: string;
};
export type LayoutUserRoles = "agent" | "supervisor" | "supervisorAgent";
export declare const isAgent: (role: LayoutUserRoles) => boolean;
export declare const isSupervisor: (role: LayoutUserRoles) => boolean;
export declare const isSupervisorAgent: (role: LayoutUserRoles) => boolean;
export declare const isLayoutJsonInOldStrcuture: (data: any) => any;
export declare const getLayoutForUserRole: (data: any, role: LayoutUserRoles) => Store.Dynamic.ConfigJson | undefined;
export declare const updateLayoutConfigCache: (data: Store.Dynamic.DesktopLayoutJson | Store.Dynamic.ConfigJson) => void;
export declare const getLayoutConfigFromCache: () => undefined | Store.Dynamic.CachedLayout;
export declare const getLayoutFromAPIGateway: (attributes: Service.Cms.DesktopLayoutResponse | undefined) => [Store.Dynamic.ConfigJson | undefined, Store.Dynamic.ConfigJson | Store.Dynamic.DesktopLayoutJson] | undefined;
export declare const updateStoresWithLayoutDetails: (layoutConfig: Store.Dynamic.ConfigJson | undefined, desktopLayoutJson: Store.Dynamic.DesktopLayoutJson | Store.Dynamic.ConfigJson) => void;
export declare const fetchLocalDesktopLayout: () => Promise<[
    Store.Dynamic.ConfigJson | undefined,
    Store.Dynamic.DesktopLayoutJson | Store.Dynamic.ConfigJson
]>;
declare const processCachedLayoutJson: (cachedLayoutConfig: any, agentXAppRouting: any) => Promise<void>;
declare const processJSONLayout: (profile: Service.Conf.Profile, teamId: string, cachedLayoutConfig: any, agentXAppRouting: any) => Promise<any>;
export { processCachedLayoutJson, processJSONLayout };
