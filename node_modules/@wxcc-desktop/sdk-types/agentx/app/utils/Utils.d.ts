import { Store } from "@/store";
import { InteractionControlNS, PciComplianceSettings } from "@agentx/agentx-mfe-react-based";
import { UserStationLoginTypes } from "@agentx/agentx-mfe-wc-based";
import { Service } from "@agentx/agentx-services";
import { OpenTask } from "@component-stores/TasksStore/open-tasks-store.interface";
import { CI } from "@uuip/unified-ui-platform";
export declare enum widgetElement {
    CONTACT_HISTORY = "contactHistory",
    WXM_JOURNEY = "wxm_journey"
}
export declare const logger: {
    readonly prefix: string;
    error(...msg: any): void;
    info(...msg: any): void;
    warn(...msg: any): void;
};
declare function fetchPciSettings(orgId: string): Promise<PciComplianceSettings | undefined>;
declare function fetchPciAllowedAttachmentTypes(): Promise<string>;
export declare function triggerWebRTCErrorNotification(): void;
export declare function triggerAgentStateErrorNotification(e: any): void;
export declare function triggerAgentSignoutResultNotification(e: any): void;
export declare function triggerSkillChangeNotification(e: any): void;
export declare function triggerEvaluationFailureNotification(e: any): void;
export declare function triggerAgentQueueReassignmentNotification(): void;
export declare function getBrowserName(): "Opera" | "Edge" | "Chrome" | "Safari" | "Firefox" | "Other";
export declare function triggerWebRTCSuccessNotification(): void;
export declare function triggerScheduledCallBackNotification(e: CustomEvent): void;
export declare const triggerBargeInNotification: (supervisorName: string) => void;
export declare const triggerLeaveInteractionNotification: (supervisorName: string) => void;
export declare function getBuildNumber(): Promise<string>;
export declare const triggerToggleMuteErrorNotification: (mute: boolean) => void;
export declare const triggerHoldResumeErrorNotification: (hold: boolean) => void;
export declare const triggerSendDTMFErrorNotification: () => void;
export declare const triggerPreferredDeviceSelectionNotification: (success: boolean, deviceName: string) => void;
export declare const isWebCall: (interaction: Service.Aqm.Contact.AgentContact["data"]["interaction"]) => boolean;
/**
 * Takes interaction object and checks if it is a digital outbound of out-dial type
 * @param interaction - interaction object
 * Returns a boolean.
 */
export declare const isDigitalOutbound: (interaction: Service.Aqm.Contact.AgentContact["data"]["interaction"]) => boolean | "" | undefined;
export declare const isDigitalOutboundCheck: (direction: string) => boolean;
export declare const isMediaTypeDigitalOutbound: (derivedMediaType: string | undefined) => boolean;
export declare const getMediaChannelForNotification: (mediaChannel: string | undefined, direction: string) => string | undefined;
export declare const getErrorMsgForReasonCode: (reasonCode: any) => string | null;
export declare function fetchFeatureFlags(): Promise<Store.App.FeatureFlagConfigs | undefined>;
/**
 * Summary of configuration helpers
 */
declare const configs: {
    fetchPciSettings: typeof fetchPciSettings;
    fetchFeatureFlags: typeof fetchFeatureFlags;
    fetchPciAllowedAttachmentTypes: typeof fetchPciAllowedAttachmentTypes;
};
export declare function updateFeatureFlags(): Promise<void>;
export declare function updateAIFeatureFlags(): Promise<void>;
export declare const findAuthTokenForIframeApp: () => void;
export declare function listenScreenPopEvent(): Promise<void>;
export { configs };
export declare function fetchMeDetails(ci: CI.Service): Promise<any>;
export declare const getFilteredTeamsBySiteIds: (teamData: Service.Cms.ManagedAllTeamResponse, siteIds: Array<string>) => Array<Service.Conf.Team>;
export declare const getAllFormattedTeams: (teamData: Service.Cms.ManagedAllTeamResponse) => Array<Service.Conf.Team>;
export declare const getFilteredQueuesByQueueIds: (queueData: Service.Cms.ManagedAllQueueResponse, queueIds: Array<string>) => Array<Service.Conf.Queue>;
export declare const getAllFormattedQueues: (queueData: Service.Cms.ManagedAllQueueResponse) => Array<Service.Conf.Queue>;
export declare function fetchManagedTeams(): Promise<void>;
export declare function fetchManagedQueues(): Promise<void>;
export declare const getSpecificIdleCode: (auxCodeId: string) => Promise<any>;
export declare function handleIframeLogout(): void;
export declare function unRegisterWebexSDK(): Promise<void>;
export declare function tabClosePrompt(e: BeforeUnloadEvent): false | "";
export declare function removeUnloadEvent(): void;
/**
 * Order/Sort list of objects based on provided field
 * @param list
 * @param field
 */
export declare const orderBy: (list: any, field: string) => any;
export declare const invokeLoginErrorModal: (errorMsg: string, trackingId?: string) => void;
export declare const invokeMaximumSessionErrorModal: (errorMsg: string, trackingId?: string) => void;
export declare function handleLoginError(errorDetail: UserStationLoginTypes.EError["detail"]): void;
export declare const invokeTeamDeletedErrorModal: (errorMsg: string, trackingId?: string) => void;
export declare const showContactCleanUpModal: (trackingId: string) => void;
export declare function isIframedLogoutRequested(windowOpener: any): boolean;
export declare function setQueryparams(): void;
export declare function getCanaryParam(): boolean;
export declare function getOrgIdParam(): string | null;
export declare function isCanaryFlagInQueryParam(): boolean;
export declare function handleLogout(token: string): Promise<void>;
export declare function updateIMISettings(): void;
export declare function customerJourneyWidgetSettings(): void;
export declare function updateAnalyzerSettings(): void;
export declare function attachIMIScript(): void;
export declare function updatePageTitle(routeName: any): void;
export declare function updateTaskArea(routeName: string): void;
export declare function registerDefaultShortcutKeys(): void;
export declare const registerWebRTCShortcuts: () => void;
/**
 * Below event will be received on notifs when agent is logged out.
 * @param event
 */
export declare function checkAgentLogout(event: Service.Aqm.Agent.LogoutSuccess["data"]): void;
export declare const getRonareason: (reasonCode: number, interaction: Service.Aqm.Contact.AgentContact["data"]["interaction"]) => import("lit-element").TemplateResult;
export declare function ronaToOtherState(interaction: Service.Aqm.Contact.AgentContact["data"]["interaction"], reasonCode: any): void;
export declare function confirmDeleteCallBack(event: CustomEvent): void;
export declare function midcallMonitoringStarted(agentId: string, interactionId: string): void;
export declare function midcallMonitoringOffered(agentId: string, interactionId: string): void;
export declare function midcallMonitoringEnded(interactionId: string): void;
export declare function midcallMonitoringFailed(interactionId: string): void;
export declare function bargeInStarted(interactionId: string, agentId: string): void;
export declare function inviteFailedToIdle(interaction: Service.Aqm.Contact.AgentContact["data"]["interaction"], trackingId: string): void;
export declare const auxiliaryPaneTelemetryTracker: (updatedTabName: string) => void;
export declare const isSupervisor: () => boolean;
export declare const isOnlySupervisor: () => boolean;
export declare const updateLSLayout: (data: Store.Dynamic.DesktopLayoutJson | Store.Dynamic.ConfigJson, key: string) => void;
export declare const getLayoutFromLS: (key: string) => undefined | Store.Dynamic.CachedLayout;
export declare const stripSpecialChar: (str: string) => string;
export declare function multipleExist(arr: Array<string | number>, values: Array<string | number>): boolean;
export declare const getManagedOrgDetails: (managedOrgs: {
    orgId: string;
    role: string;
}[], orgId: string) => {
    orgId: string;
    role: string;
} | null;
export declare const getUserSystemRole: (orgDetails: {
    orgId: string;
    role: string;
}) => string | null;
export declare const isSecondaryEpDnAgent: (interaction: Service.Aqm.Contact.AgentContact["data"]["interaction"]) => boolean | "" | undefined;
export declare function triggerCustomerDisconnectNotification(data: Service.Aqm.Contact.AgentContact["data"]): void;
export declare const dispatchUpdatedAgentProfileEvent: (comp: any) => void;
/**
 * Debounce method to avoid repetitive  calls
 */
export declare const debounce: (fn: any, _timeout?: number) => (...args: any[]) => void;
export declare const showErrorModal: (header: string, message: string, trackingId: string) => void;
export declare function contactCallbackRetryModal(reasonCode: number, trackingId: string): {
    header: string;
    message: string;
    trackingId: string;
};
export declare const handleWebexModal: () => void;
type ShortcutEventStopListen = () => void;
export declare const handleShortcutKeyEvent: () => null | ShortcutEventStopListen;
export declare const toggleVoiceInteractionPanel: () => void;
export declare const handleAutoAnswer: (data: Service.Aqm.Contact.AgentContact["data"]) => void;
export declare const getFCValue: (data: OpenTask) => string | Service.Aqm.Contact.cadOrderData | undefined;
export declare const getAgentCallMonitoringStateOnBargeIn: (agentCallMonitoringStateDetails: any) => InteractionControlNS.AgentCallMonitoringState;
export declare const getBargedInSupId: (participants: any) => string | undefined;
export declare const computeAgentCallMonitoringStateDetails: (interactionDetails: Service.Aqm.Contact.AgentContact["data"]["interaction"]) => InteractionControlNS.AgentCallMonitoringState | undefined;
export declare const dispatchCustomEvent: (comp: any, eventName: string, value: any) => void;
export declare function getRoleNameForTelemetry(roleName: string): string;
export declare function getIsWebRTCEnabled(): boolean;
export declare function reportTelemetry(functionName: string, message: string): void;
export declare function getIsClickToCallEnabled(): boolean;
export declare function handleTelemetryOnPresenceChange(): void;
export declare function updateOutdialAniList(e: any): void;
export declare const webexCallingDeviceRegisteringHandler: () => void;
export declare const handleJsSdkCiLogout: () => void;
export declare const handleWxmSettingsUpdate: (e: any) => void;
export declare const webCallingDeviceDisconnectedHandler: (event: any) => void;
export declare const getQuerySelectorTillRouterView: () => ShadowRoot | null;
export declare function agentHasSupervisorCapability(): boolean;
export declare function isInteractionsPageEnabled(): boolean;
export declare function isAgentPerformanceViewEnabled(): boolean;
export declare function isQueueStatsTabEnabled(): boolean;
export declare function isEvaluationsManagerViewEnabled(): boolean;
export declare function isTaskListV2Enabled(): boolean;
/**
 * Toggles the display of a specified element based on the `isMaximized` parameter.
 *
 * @param {boolean} isMaximized - If true, the element's display style is set to "block", otherwise it's set to "none".
 * @param {string} selector - The CSS selector of the element to toggle.
 * @param {boolean} [isAdditonalShadowRoot=false] - If true, the function will look for the element inside the shadow root of a "uuip-dynamic-widget" inside "#panel-two".
 * @param {boolean} [isMdTab=false] - If true and `isAdditonalShadowRoot`
 * is also true, the function will look for the element inside the shadow root of "md-tabs" inside the shadow root of a "uuip-dynamic-widget" inside "#panel-two".
 * @returns {boolean} - Returns true if the element was found and its display was toggled, otherwise returns false.
 */
export declare const toggleDisplayOnMaximize: (isMaximized: boolean, selector: string, isAdditonalShadowRoot?: boolean, isMdTab?: boolean) => boolean;
export declare const isEmailOrChat: (store: any) => boolean;
export declare const fetchTeamDataById: (orgId: string, page: number, agentDbId: string, searchTerm?: string, teamId?: string) => Promise<Service.Conf.TeamData>;
export declare const layoutFileSHA: (message: string) => string;
export declare const shouldRequestRealTimeTranscripts: (interaction: Service.Aqm.Contact.AgentContact["data"]["interaction"]) => boolean;
export declare const handleAgentMediaForkUpdate: (agentId: string, orgId: string, interaction: Service.Aqm.Contact.AgentContact["data"]["interaction"]) => void;
export declare const handleParticipantJoining: (agentId: string, orgId: string, interaction: Service.Aqm.Contact.AgentContact["data"]["interaction"]) => void;
export declare const overrideWebworker: () => void;
