export declare const desktopLayoutMocked: {
    teams: {
        id: string;
        dbId: string;
        analyzerId: string;
        name: string;
        teamType: string;
        teamStatus: string;
        active: boolean;
        siteId: string;
        desktopLayoutId: string;
        siteName: string;
        skillProfileId: string;
        multiMediaProfileId: string;
        userIds: string[];
        links: {
            rel: string;
            href: string;
        }[];
        createdTime: number;
        lastUpdatedTime: number;
    }[];
    managedTeams: {
        id: string;
        name: string;
        dbId: string;
        links: never[];
    }[];
    managedQueues: {
        id: string;
        name: string;
        links: never[];
    }[];
    desktopLayout: {
        id: string;
        name: string;
        description: string;
        editedBy: string;
        jsonFileName: string;
        jsonFileContent: string;
        global: boolean;
        status: boolean;
        defaultJsonModified: boolean;
        validated: boolean;
        validatedTime: number;
        defaultJsonModifiedTime: number;
        modifiedTime: number;
        teamIds: string[];
        createdTime: number;
        lastUpdatedTime: number;
    };
    globalDesktopLayout: {
        auxiliaryMetadata: {};
        auxiliaryDataList: {
            id: string;
            auxiliaryDataType: string;
            type: string;
            attributes: {
                validated__i: number;
                _lmts__l: number;
                assigned__i: number;
                editedBy__s: string;
                name__s: string;
                cstts: number;
                status__i: number;
                _type__s: string;
                tid: string;
                validatedTime__l: number;
                sid: string;
                global__i: number;
                description__s: string;
                jsonFileContent__s: string;
                teamIds__sa: never[];
                jsonFileName__s: string;
            };
        }[];
    };
    globalDesktopLayoutV2: {
        id: string;
        name: string;
        description: string;
        editedBy: string;
        jsonFileName: string;
        jsonFileContent: string;
        global: boolean;
        status: boolean;
        defaultJsonModified: boolean;
        validated: boolean;
        validatedTime: number;
        defaultJsonModifiedTime: number;
        modifiedTime: number;
        teamIds: never[];
        links: never[];
        createdTime: number;
        lastUpdatedTime: number;
    }[];
    entryPoints: {
        id: string;
        name: string;
        description: string;
        entryPointType: string;
        channelType: string;
        active: boolean;
        serviceLevelThreshold: number;
        maximumActiveContacts: number;
        xspVersion: string;
        subscriptionId: string;
        routePointId: string;
        links: never[];
        createdTime: number;
        lastUpdatedTime: number;
    };
    dialNumbers: {
        meta: {
            orgid: string;
            page: number;
            pageSize: number;
            totalPages: number;
            totalRecords: number;
            links: {
                self: string;
            };
        };
        data: ({
            organizationId: string;
            id: string;
            version: number;
            dialledNumber: string;
            routePointId: string;
            entryPointId: string;
            defaultAni: boolean;
            links: {
                rel: string;
                href: string;
            }[];
            createdTime: number;
            lastUpdatedTime: number;
        } | {
            organizationId: string;
            id: string;
            version: number;
            dialledNumber: string;
            routePointId: string;
            entryPointId: string;
            links: {
                rel: string;
                href: string;
            }[];
            createdTime: number;
            lastUpdatedTime: number;
            defaultAni?: undefined;
        })[];
    };
};
export declare const persistentBlockLayout: ({
    comp: string;
    textContent: string;
    attributes: {
        slot: string;
    };
    children?: undefined;
} | {
    comp: string;
    attributes: {
        slot: string;
    };
    children: {
        comp: string;
        attributes: {
            src: string;
        };
        wrapper: {
            title: string;
            maximizeAreaName: string;
        };
    }[];
    textContent?: undefined;
} | {
    comp: string;
    attributes: {
        slot: string;
    };
    children: ({
        comp: string;
        attributes: {
            name: string;
        };
        textContent?: undefined;
    } | {
        comp: string;
        textContent: string;
        attributes?: undefined;
    })[];
    textContent?: undefined;
} | {
    comp: string;
    attributes: {
        slot: string;
    };
    children: {
        comp: string;
        properties: {
            area: {
                id: string;
                widgets: {
                    comp1: {
                        comp: string;
                        attributes: {
                            src: string;
                        };
                        wrapper: {
                            title: string;
                            maximizeAreaName: string;
                        };
                    };
                    comp2: {
                        comp: string;
                        script: string;
                        attributes: {
                            title: string;
                        };
                        wrapper: {
                            title: string;
                            maximizeAreaName: string;
                        };
                    };
                };
                layout: {
                    areas: string[][];
                    size: {
                        cols: number[];
                        rows: number[];
                    };
                };
            };
        };
    }[];
    textContent?: undefined;
})[];
export declare const dynamicAreaJSON: {
    id: string;
    widgets: {
        comp1: {
            comp: string;
            attributes: {
                src: string;
            };
            properties: {
                isDarkTheme: string;
            };
            wrapper: {
                title: string;
                maximizeAreaName: string;
            };
        };
        comp2: {
            comp: string;
            script: string;
            attributes: {
                title: string;
            };
            wrapper: {
                title: string;
                maximizeAreaName: string;
            };
            visibility: string;
        };
    };
    layout: {
        areas: string[][];
        size: {
            cols: number[];
            rows: number[];
        };
    };
};
