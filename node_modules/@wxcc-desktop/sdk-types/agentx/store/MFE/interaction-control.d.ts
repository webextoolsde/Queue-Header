import { Service } from "@agentx/agentx-services";
export default class InteractionControl {
    private readonly autoWrapUp;
    private autoWrapUpTimer;
    timerId: number;
    private readonly getDefaultWrapUpReason;
    clearTimers: () => void;
    submitHandler: (interactionIdValue: string, wrapUpContent: Service.Aqm.Configs.WrapupData["wrapUpProps"]) => void;
    constructor();
    get getListOfAutoWrapUp(): Array<string>;
    get autoWrapUpTimersRunning(): {
        [k: string]: any;
    };
    deleteAutoWrapTimer: (interactionId: string) => void;
    addAutoWrapUpTimers: (interactionId: string, wrapUpTimeStamp: number, autoWrapUpData: Service.Aqm.Configs.WrapupData) => void;
    addInteraction(interactionId: string): void;
    /**
     * this method is used to check the interactionid in the session storage set using canceled autoWrapup.
     */
    getIndexOfCanceledAutoWrapupInteration(interactionId: string): number | undefined;
    removeInteraction(interactionId: string): void;
    private getIndex;
    /**
     * this method is used to set the interactionId in the session when agent-contact event comes,
     * incase this was not stored due to wrapUp event not received by the application because of disconnect.
     */
    setAutoWrapupState(data: Service.Aqm.Contact.AgentContact["data"], agentId: string, wrapUpData: Service.Aqm.Configs.WrapupData): void;
    checkForWrapUp(data: Service.Aqm.Contact.AgentContact["data"], agentId: string): void;
}
export declare const interactionControl: InteractionControl;
