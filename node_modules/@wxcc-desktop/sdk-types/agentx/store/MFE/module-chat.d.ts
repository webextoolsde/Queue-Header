import { Utility } from "@agentx/agentx-mfe-react-based";
import { TaskList } from "@agentx/agentx-mfe-wc-based";
import { Service } from "@agentx/agentx-services";
export declare class ModuleChat {
    chatMessage: Service.Cms.ChatTemplateResponse;
    hasCustomerLeft: Map<string, boolean>;
    isConvNotFound: Map<string, boolean>;
    unreadMessages: Map<string, TaskList.UnreadChatMessage>;
    imiTeamId: string;
    imiAgentId: string;
    imiConvId: string;
    imiWidgetInitState: boolean;
    imiServicesInitialized: boolean;
    newUnreadTaskMessage: TaskList.UnreadMessage;
    constructor();
    get unReadMessagesObject(): Record<string, TaskList.UnreadChatMessage>;
    get getNewUnreadMessageId(): TaskList.UnreadMessage;
    setChatMessages(chatMessages: Service.Cms.ChatTemplateResponse): void;
    isChatConvActive(convId: string): boolean;
    setUnreadMessages(data: Utility.MediaDetails): void;
    fireChatMessageNotification(data: Utility.MediaDetails, task: Service.Aqm.Contact.AgentContact["data"]): void;
    getMediaSubChannelType(mediaType: string, mediaChannel: string | undefined): boolean;
    getNotificationIconUrl(mediaChannel: string | undefined): string | undefined;
    getUnreadMessagesFromSessionStorage(data: Record<string, TaskList.UnreadChatMessage> | null): void;
    updateHasCustomerLeft(convId: string): void;
    deleteUnreadMessages(taskId: string): void;
    clearAllUnreadMessagesFromStore(): void;
    setImiWidgetInitState(state: boolean): void;
    setImiServicesInitialized(flag: boolean): void;
    get chatMessages(): Service.Cms.ChatTemplateResponse;
    get imiInitState(): boolean;
    get imiServicesInit(): boolean;
}
