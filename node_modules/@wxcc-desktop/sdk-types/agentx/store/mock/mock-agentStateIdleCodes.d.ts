export declare const mockAgentStateIdleCodes: {
    data: {
        isSystem: boolean;
        name: string;
        id: string;
        isDefault: boolean;
    }[];
    meta: {
        links: {
            first: string;
            last: string;
            next: string;
            self: string;
        };
        orgid: string;
        page: number;
        pageSize: number;
        totalPages: number;
        totalRecords: number;
    };
};
export declare const agentChannelReloginSuccessResponse: {
    type: string;
    orgId: string;
    trackingId: string;
    data: {
        eventType: string;
        teamId: string;
        agentChannelStateDetailMap: {
            voice: {
                agentState: string;
                pendingIdle: boolean;
                idleCodeId: null;
                availableChannelCount: number;
                totalChannelCount: number;
                stateChangeTimestamp: number;
                stateChangeReason: string;
                lastIdleCodeChangeTimestamp: number;
                auxCodeId: null;
                manuallyAssignedChannelCount: number;
                totalManuallyAssignedChannelCount: number;
            };
            chat: {
                agentState: string;
                pendingIdle: boolean;
                idleCodeId: null;
                availableChannelCount: number;
                totalChannelCount: number;
                lastIdleCodeChangeTimestamp: null;
                auxCodeId: null;
                manuallyAssignedChannelCount: number;
                totalManuallyAssignedChannelCount: number;
                stateChangeTimestamp: number;
                stateChangeReason: string;
            };
            email: {
                agentState: string;
                pendingIdle: boolean;
                idleCodeId: null;
                availableChannelCount: number;
                totalChannelCount: number;
                stateChangeTimestamp: number;
                stateChangeReason: string;
                lastIdleCodeChangeTimestamp: number;
                auxCodeId: null;
                manuallyAssignedChannelCount: number;
                totalManuallyAssignedChannelCount: number;
            };
            social: {
                agentState: string;
                pendingIdle: boolean;
                idleCodeId: null;
                availableChannelCount: number;
                totalChannelCount: number;
                stateChangeTimestamp: number;
                stateChangeReason: string;
                lastIdleCodeChangeTimestamp: number;
                auxCodeId: null;
                manuallyAssignedChannelCount: number;
                totalManuallyAssignedChannelCount: number;
            };
        };
        stateChangeTimestamp: number;
        lastIdleCodeChangeTimestamp: number;
        profileType: string;
        channelsMap: {
            telephony: never[];
            chat: never[];
            email: never[];
            social: never[];
        };
        agentId: string;
        interactionIds: never[];
        trackingId: string;
        auxCodeId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        siteId: string;
        isExtension: boolean;
        type: string;
        dn: string;
        stateChangeReason: string;
    };
};
export declare const agentChannelStateChangedResponse: {
    data: {
        agentId: string;
        orgId: string;
        channelType: string;
        AgentChannelStateDetail: {
            agentState: string;
            pendingIdle: boolean;
            idleCodeId: null;
            availableChannelCount: number;
            totalChannelCount: number;
            stateChangeTimestamp: number;
            stateChangeReason: string;
            lastIdleCodeChangeTimestamp: null;
            auxCodeId: null;
            manuallyAssignedChannelCount: number;
            totalManuallyAssignedChannelCount: number;
        };
        agentSessionId: string;
        trackingId: string;
        connectedChannels: string[];
        changedById: null;
        changedBy: null;
        changedByName: null;
        type: string;
    };
};
