import { TaskList, UserStationLoginTypes } from "@agentx/agentx-mfe-wc-based";
import { Service } from "@agentx/agentx-services";
export declare const TASKS: TaskList.Task[];
export declare const callEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const callEventMaskSensitiveData: Service.Aqm.Contact.AgentContact["data"];
export declare const callEventMaskSensitiveDataNoCallAssociatedANI: Service.Aqm.Contact.AgentContact["data"];
export declare const callEventMaskSensitiveDataOutbound: Service.Aqm.Contact.AgentContact["data"];
export declare const callEventAfterTransferringBargedInCall: Service.Aqm.Contact.AgentContact["data"];
export declare const agentAddCampaignReservationEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const imiDigitalContactUpdatedEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const flatTaskForCall: {
    additionalDetails: string;
    appUser: string;
    category: string;
    mediaType: string;
    mediaChannel: string;
    customerName: string;
    customerNumber: string;
    ani: string;
    displayAni: string;
    orgId: string;
    owner: string;
    interactionId: string;
    mediaResourceId: string;
    isConsulted: boolean;
    state: string;
    consultHold: boolean;
    consultMediaResourceId: string;
    isTerminated: boolean;
    agentId: string;
    ownerName: string;
    ownerPhoneNumber: string;
    isWrapUp: boolean;
    hasJoined: boolean;
    phoneNumber: string;
    dnis: string;
    virtualTeamName: string;
    ivrPath: string;
    pathId: string;
    ronaTimeout: string;
    isConferencing: boolean;
    isRecordingPaused: boolean;
    isPauseResumeEnabled: boolean;
    isRecorded: boolean;
    contactDirection: string;
    isHold: boolean;
    ctqInProgress: boolean;
    outdialTransferToQueueEnabled: boolean;
    queueId: string;
    sourceNumber: string;
    sourcePage: string;
    recordingPauseDuration: undefined;
    destAgentId: string;
    destAgentName: undefined;
    destAgentPhoneNumber: undefined;
    timeStamp: number;
    consultTimeStamp: number;
    isOwner: boolean;
};
export declare const baseTaskForTaskList: {
    mediaType: string;
    mediaChannel: string;
    ani: string;
    displayAni: string;
    interactionId: string;
    isConsulted: boolean;
    state: string;
    consultHold: boolean;
    dnis: string;
    virtualTeamName: string;
    isConferencing: boolean;
    contactDirection: string;
    isHold: boolean;
    timeStamp: number;
    consultTimeStamp: number;
};
export declare const consultToDNTask: {
    eventType: string;
    agentId: string;
    trackingId: string;
    destinationType: string;
    interaction: {
        isFcManaged: boolean;
        isTerminated: boolean;
        mediaType: string;
        previousVTeams: string[];
        state: string;
        currentVTeam: string;
        participants: {
            "+19997770096": {
                id: string;
                pType: string;
                type: string;
            };
            "16839506-7c48-4a71-ba1b-d585e5d37607": {
                name: string;
                pType: string;
                teamName: string;
                lastUpdated: number;
                teamId: string;
                joinTimestamp: number;
                isConsulted: boolean;
                hasJoined: boolean;
                consultTimestamp: number;
                dn: string;
                queueId: string;
                id: string;
                sessionId: string;
                consultState: string;
                queueMgrId: string;
                siteId: string;
                type: string;
                channelId: string;
                wrapUpTimestamp: null;
                isWrapUp: boolean;
            };
            "9997770099": {
                id: string;
                pType: string;
                type: string;
            };
        };
        interactionId: string;
        orgId: string;
        callProcessingDetails: {
            QMgrName: string;
            pauseResumeEnabled: string;
            taskToBeSelfServiced: string;
            ani: string;
            displayAni: string;
            recordInProgress: string;
            pauseDuration: string;
            dnis: string;
            tenantId: string;
            QueueId: string;
            vteamId: string;
            jscriptId: string;
            customerName: string;
            virtualTeamName: string;
            ronaTimeout: string;
            category: string;
            reason: string;
            sourceNumber: string;
            sourcePage: string;
            appUser: string;
            customerNumber: string;
            reasonCode: string;
            IvrPath: string;
            pathId: string;
            fromAddress: string;
        };
        media: {
            "49bcf26b-ec75-4351-89fa-55d54682c20c": {
                mediaResourceId: string;
                mediaType: string;
                mediaMgr: string;
                participants: string[];
                mType: string;
                isHold: boolean;
                holdTimestamp: number;
            };
            "cd5ec9da-202c-4b22-847d-dbf5aafda414": {
                mediaResourceId: string;
                mediaType: string;
                mediaMgr: string;
                participants: string[];
                mType: string;
                isHold: boolean;
                holdTimestamp: null;
            };
        };
        owner: string;
        mediaChannel: string;
        contactDirection: {
            type: string;
        };
        callFlowParams: {
            Play2: {
                name: string;
                qualifier: string;
                description: string;
                valueDataType: string;
                value: string;
            };
            Queue3: {
                name: string;
                qualifier: string;
                description: string;
                valueDataType: string;
                value: string;
            };
        };
    };
    interactionId: string;
    orgId: string;
    queueMgr: string;
    consultMediaResourceId: string;
    type: string;
    destAgentId: string;
    mediaResourceId: string;
    state: string;
    owner: string;
    isConferencing: boolean;
};
export declare const postCallTask: {
    callLegType: {
        type: string;
    };
    eventTime: number;
    eventType: string;
    interaction: {
        callAssociatedData: {
            "FC-DESKTOP-VIEW": {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            ani: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            dn: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            ronaTimeout: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test3: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test4: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test6: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test7: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test8: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test9: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test_test: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test_test1: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test_test10: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test_test2: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test_test5: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_test_test_test_test11: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            test_test_testing12: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
            virtualTeamName: {
                agentEditable: boolean;
                agentViewable: boolean;
                displayName: string;
                global: boolean;
                isSecure: boolean;
                name: string;
                reportable: boolean;
                secureKeyId: string;
                secureKeyVersion: number;
                type: string;
                value: string;
            };
        };
        callAssociatedDetails: {
            ani: string;
            dn: string;
            ronaTimeout: string;
            virtualTeamName: string;
        };
        callFlowParams: {};
        callProcessingDetails: {
            CONTINUE_RECORDING_ON_TRANSFER: string;
            EP_ID: string;
            QMgrName: string;
            QueueId: string;
            ROUTING_TYPE: string;
            ani: string;
            checkAgentAvailability: string;
            customerRegion: string;
            dnis: string;
            fceRegisteredEvents: string;
            flowTagId: string;
            hasCustomerLeft: string;
            isParked: string;
            mohFileName: string;
            pauseDuration: string;
            pauseResumeEnabled: string;
            priority: string;
            queuedDestinationID: string;
            queuedTo: string;
            recordInProgress: string;
            recordingStarted: string;
            ronaTimeout: string;
            taskToBeSelfServiced: string;
            tenantId: string;
            virtualTeamName: string;
            vteamId: string;
            workflowId: string;
            workflowName: string;
        };
        contactDirection: {
            type: string;
        };
        createdTimestamp: number;
        currentVTeam: string;
        interactionId: string;
        isFcManaged: boolean;
        isMediaForked: boolean;
        isTerminated: boolean;
        mainInteractionId: string;
        media: {
            "ed630426-cfe6-4de8-bb6d-5a455c298975": {
                holdTimestamp: null;
                isHold: boolean;
                mType: string;
                mediaMgr: string;
                mediaResourceId: string;
                mediaType: string;
                participants: string[];
            };
        };
        mediaChannel: string;
        mediaProperties: null;
        mediaType: string;
        orgId: string;
        outboundType: null;
        owner: string;
        parentInteractionId: string;
        participants: {
            "1002": {
                callerId: null;
                hasJoined: boolean;
                hasLeft: boolean;
                id: string;
                isInPredial: boolean;
                pType: string;
                type: string;
            };
            "5554029391": {
                callerId: null;
                hasLeft: boolean;
                id: string;
                isInPredial: boolean;
                pType: string;
                type: string;
            };
            "ba604fa7-5bbd-46a4-bcca-e7a7bc1370fd": {
                autoAnswerEnabled: boolean;
                bnrDetails: null;
                callerId: null;
                channelId: string;
                consultState: string;
                consultTimestamp: number;
                currentState: string;
                currentStateTimestamp: number;
                deviceCallId: null;
                deviceId: null;
                deviceType: null;
                dn: string;
                hasJoined: boolean;
                hasLeft: boolean;
                id: string;
                isConsulted: boolean;
                isInPredial: boolean;
                isOffered: boolean;
                isWrapUp: boolean;
                isWrappedUp: boolean;
                joinTimestamp: number;
                lastUpdated: number;
                name: string;
                pType: string;
                queueId: string;
                queueMgrId: string;
                sessionId: string;
                siteId: string;
                skillId: null;
                skillName: null;
                skills: never[];
                teamId: string;
                teamName: string;
                type: string;
                wrapUpTimestamp: null;
            };
        };
        previousVTeams: string[];
        queuedTimestamp: null;
        state: string;
        workflowManager: null;
    };
    interactionId: string;
    orgId: string;
    participantId: string;
    participantType: string;
    queueMgr: string;
    trackingId: string;
    type: string;
};
export declare const consultToEntryPointTask: {
    eventType: string;
    agentId: string;
    trackingId: string;
    destinationType: string;
    interaction: {
        isFcManaged: boolean;
        isTerminated: boolean;
        mediaType: string;
        previousVTeams: string[];
        state: string;
        currentVTeam: string;
        participants: {
            "+19997770096": {
                id: string;
                pType: string;
                type: string;
            };
            "16839506-7c48-4a71-ba1b-d585e5d37607": {
                name: string;
                pType: string;
                teamName: string;
                lastUpdated: number;
                teamId: string;
                joinTimestamp: number;
                isConsulted: boolean;
                hasJoined: boolean;
                consultTimestamp: number;
                dn: string;
                queueId: string;
                id: string;
                sessionId: string;
                consultState: string;
                queueMgrId: string;
                siteId: string;
                type: string;
                channelId: string;
                wrapUpTimestamp: null;
                isWrapUp: boolean;
            };
            "9997770099": {
                id: string;
                pType: string;
                type: string;
                epId: string;
            };
        };
        interactionId: string;
        orgId: string;
        callProcessingDetails: {
            QMgrName: string;
            pauseResumeEnabled: string;
            taskToBeSelfServiced: string;
            ani: string;
            displayAni: string;
            recordInProgress: string;
            pauseDuration: string;
            dnis: string;
            tenantId: string;
            QueueId: string;
            vteamId: string;
            jscriptId: string;
            customerName: string;
            virtualTeamName: string;
            ronaTimeout: string;
            category: string;
            reason: string;
            sourceNumber: string;
            sourcePage: string;
            appUser: string;
            customerNumber: string;
            reasonCode: string;
            IvrPath: string;
            pathId: string;
            fromAddress: string;
        };
        media: {
            "49bcf26b-ec75-4351-89fa-55d54682c20c": {
                mediaResourceId: string;
                mediaType: string;
                mediaMgr: string;
                participants: string[];
                mType: string;
                isHold: boolean;
                holdTimestamp: number;
            };
            "cd5ec9da-202c-4b22-847d-dbf5aafda414": {
                mediaResourceId: string;
                mediaType: string;
                mediaMgr: string;
                participants: string[];
                mType: string;
                isHold: boolean;
                holdTimestamp: null;
            };
        };
        owner: string;
        mediaChannel: string;
        contactDirection: {
            type: string;
        };
        callFlowParams: {
            Play2: {
                name: string;
                qualifier: string;
                description: string;
                valueDataType: string;
                value: string;
            };
            Queue3: {
                name: string;
                qualifier: string;
                description: string;
                valueDataType: string;
                value: string;
            };
        };
    };
    interactionId: string;
    orgId: string;
    queueMgr: string;
    consultMediaResourceId: string;
    type: string;
    destAgentId: string;
    mediaResourceId: string;
    owner: string;
    isConferencing: boolean;
};
export declare const BaseTaskForDN: {
    mediaType: string;
    mediaChannel: string;
    ani: string;
    displayAni: string;
    orgId: string;
    owner: string;
    interactionId: string;
    mediaResourceId: string;
    isConsulted: boolean;
    state: string;
    destAgentId: string;
    consultHold: boolean;
    consultMediaResourceId: string;
    isTerminated: boolean;
    agentId: string;
    ownerName: string;
    ownerPhoneNumber: string;
    isWrapUp: boolean;
    hasJoined: boolean;
    phoneNumber: string;
    dnis: string;
    virtualTeamName: string;
    ivrPath: string;
    pathId: string;
    ronaTimeout: string;
    isConferencing: boolean;
    isRecordingPaused: boolean;
    isRecorded: boolean;
    isPauseResumeEnabled: boolean;
    recordingPauseDuration: string;
    contactDirection: string;
    isHold: boolean;
    ctqInProgress: boolean;
    outdialTransferToQueueEnabled: boolean;
    timeStamp: number;
    consultTimeStamp: number;
    isOwner: boolean;
};
export declare const baseTaskForDNforTaskList: {
    mediaType: string;
    mediaChannel: string;
    ani: string;
    displayAni: string;
    interactionId: string;
    isConsulted: boolean;
    state: string;
    consultHold: boolean;
    dnis: string;
    virtualTeamName: string;
    isConferencing: boolean;
    contactDirection: string;
    isHold: boolean;
    timeStamp: number;
    consultTimeStamp: number;
};
export declare const agentContactEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const agentContactEventOnMonitoring: Service.Aqm.Contact.AgentContact["data"];
export declare const bargedInInteractionParticipants: {
    "+19997651104": {
        id: string;
        pType: string;
        type: string;
    };
    "078111e3-003b-4a2a-b470-07e0cabb9dd9": {
        channelId: string;
        consultState: null;
        consultTimestamp: null;
        dn: string;
        hasJoined: boolean;
        id: string;
        isConsulted: boolean;
        isOffered: boolean;
        isWrapUp: boolean;
        joinTimestamp: number;
        lastUpdated: number;
        name: string;
        pType: string;
        queueId: string;
        queueMgrId: string;
        sessionId: string;
        siteId: string;
        skillId: null;
        skillName: null;
        skills: never[];
        teamId: string;
        teamName: string;
        type: string;
        wrapUpTimestamp: null;
    };
    "2e98dc66-744f-4fc2-8646-4c24365a3dd6": {
        dn: string;
        hasJoined: boolean;
        holdTimestamp: number;
        id: string;
        isOnHold: boolean;
        joinTimestamp: number;
        monitoringDetails: {
            type: string;
            startTimestamp: number;
        };
        name: string;
        pType: string;
        type: string;
    };
};
export declare const bargedInInteraction: Service.Aqm.Contact.AgentContact["data"]["interaction"];
export declare const computedAgentCallMonitoringDetails: {
    supervisorName: string;
    supervisorId: string;
    monitoringType: string;
    agentId: string;
    interactionId: string;
    eventTime: number;
};
export declare const stationLoginSuccessResponse: UserStationLoginTypes.ESuccess["detail"];
export declare const userStationLoginSuccessResponse: {
    dn: string;
    agentId: string;
    usesOtherDN: boolean;
    roles: string[];
    teamId: string;
    teamName: string;
    subStatus: string;
    lastIdleCodeChangeTimestamp: number;
    lastStateChangeTimestamp: number;
    profileType: string;
    mmProfile: {
        voiceCount: number;
        chatCount: number;
        emailCount: number;
        socialCount: number;
    };
    interactionIds: never[];
};
export declare const profileMockData: Service.Conf.Profile;
export declare const emailOfferEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const chatEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const emailEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const emailOutboundEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const socialEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const smsOutboundEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const logoutEvent: Service.Aqm.Agent.LogoutSuccess["data"];
export declare const logoutEventByMachine: Service.Aqm.Agent.LogoutSuccess["data"];
export declare const logoutEventBySelf: Service.Aqm.Agent.LogoutSuccess["data"];
export declare const mockReloginSuccess: Service.Aqm.Agent.ReloginSuccess;
export declare const dataOutDialFailed: Service.Aqm.Contact.AgentContact["data"];
export declare const dataOutDialFailedEmail: Service.Aqm.Contact.AgentContact["data"];
export declare const dataOutDialFailedSMS: Service.Aqm.Contact.AgentContact["data"];
export declare const agentContactRTD: {
    data: {
        datasetName: string;
        datasetValues: {
            data: {
                agentId: string;
                agentName: string;
                channelType: string;
                contactDirection: string;
                contactIngestionTimestamp: number;
                destination: string;
                destinationAgentDNIS: null;
                destinationAgentId: null;
                destinationAgentName: null;
                entrypointId: string;
                entrypointName: string;
                eventName: string;
                eventTime: number;
                interactionId: string;
                isBarged: null;
                isMonitored: null;
                monitorFullName: null;
                monitorStatus: null;
                monitorUserId: null;
                monitorVisibility: null;
                orgId: string;
                origin: string;
                queueId: string;
                queueName: string;
                recording: null;
                siteId: string;
                siteName: string;
                teamId: string;
                teamName: string;
            };
            key: string;
            operation: string;
        }[];
        eventMetaData: {
            activeSince: number;
            requestTime: number;
            subscriptionStatus: string;
        };
        eventTime: number;
        orgId: string;
        type: string;
    };
};
export declare const agentContactRTDSecond: {
    data: {
        datasetName: string;
        datasetValues: {
            data: {
                agentId: string;
                agentName: string;
                channelType: string;
                contactDirection: string;
                contactIngestionTimestamp: number;
                destination: string;
                destinationAgentDNIS: null;
                destinationAgentId: null;
                destinationAgentName: null;
                entrypointId: string;
                entrypointName: string;
                eventName: string;
                eventTime: number;
                interactionId: string;
                isBarged: null;
                isMonitored: null;
                monitorFullName: null;
                monitorStatus: null;
                monitorUserId: null;
                monitorVisibility: null;
                orgId: string;
                origin: string;
                queueId: string;
                queueName: string;
                recording: null;
                siteId: string;
                siteName: string;
                teamId: string;
                teamName: string;
            };
            key: string;
            operation: string;
        }[];
        eventMetaData: {
            activeSince: number;
            requestTime: number;
            subscriptionStatus: string;
        };
        eventTime: number;
        orgId: string;
        type: string;
    };
};
export declare const microsoftConfig: {
    id: string;
    organizationId: string;
    active: boolean;
    accountDetails: {
        name: string;
        tenantId: string;
        userName: string;
    };
    showUserDetails: boolean;
    idleCodes: {
        doNotDisturbId: string;
        onACallId: string;
        presentingId: string;
    };
    stateSynchronization: boolean;
    createdTime: number;
    lastUpdatedTime: number;
};
export declare const webexConfig: {
    id: string;
    organizationId: string;
    showUserDetails: boolean;
    stateSynchronization: boolean;
    idleCodes: {
        busyId: string;
        doNotDisturbId: string;
        inACalendarMeetingId: string;
        inAMeetingId: string;
        onACallId: string;
        outOfOfficeId: string;
        presentingId: string;
        quietHoursId: string;
    };
    createdTime: number;
    lastUpdatedTime: number;
};
export declare const connectedCallbackFailed: {
    data: {
        agentId: string;
        eventTime: number;
        eventType: string;
        interaction: {
            callAssociatedData: {
                "FC-DESKTOP-VIEW": {
                    agentEditable: boolean;
                    agentViewable: boolean;
                    displayName: string;
                    global: boolean;
                    isSecure: boolean;
                    name: string;
                    reportable: boolean;
                    secureKeyId: string;
                    secureKeyVersion: number;
                    type: string;
                    value: string;
                };
                Global_Language: {
                    agentEditable: boolean;
                    agentViewable: boolean;
                    displayName: string;
                    global: boolean;
                    isSecure: boolean;
                    name: string;
                    reportable: boolean;
                    secureKeyId: string;
                    secureKeyVersion: number;
                    type: string;
                    value: string;
                };
                Global_VoiceName: {
                    agentEditable: boolean;
                    agentViewable: boolean;
                    displayName: string;
                    global: boolean;
                    isSecure: boolean;
                    name: string;
                    reportable: boolean;
                    secureKeyId: string;
                    secureKeyVersion: number;
                    type: string;
                    value: string;
                };
                ani: {
                    agentEditable: boolean;
                    agentViewable: boolean;
                    displayName: string;
                    global: boolean;
                    isSecure: boolean;
                    name: string;
                    reportable: boolean;
                    secureKeyId: string;
                    secureKeyVersion: number;
                    type: string;
                    value: string;
                };
                cadVar: {
                    agentEditable: boolean;
                    agentViewable: boolean;
                    displayName: string;
                    global: boolean;
                    isSecure: boolean;
                    name: string;
                    reportable: boolean;
                    secureKeyId: string;
                    secureKeyVersion: number;
                    type: string;
                    value: string;
                };
                dn: {
                    agentEditable: boolean;
                    agentViewable: boolean;
                    displayName: string;
                    global: boolean;
                    isSecure: boolean;
                    name: string;
                    reportable: boolean;
                    secureKeyId: string;
                    secureKeyVersion: number;
                    type: string;
                    value: string;
                };
                ronaTimeout: {
                    agentEditable: boolean;
                    agentViewable: boolean;
                    displayName: string;
                    global: boolean;
                    isSecure: boolean;
                    name: string;
                    reportable: boolean;
                    secureKeyId: string;
                    secureKeyVersion: number;
                    type: string;
                    value: string;
                };
                virtualTeamName: {
                    agentEditable: boolean;
                    agentViewable: boolean;
                    displayName: string;
                    global: boolean;
                    isSecure: boolean;
                    name: string;
                    reportable: boolean;
                    secureKeyId: string;
                    secureKeyVersion: number;
                    type: string;
                    value: string;
                };
            };
            callAssociatedDetails: {
                ani: string;
                dn: string;
                ronaTimeout: string;
                virtualTeamName: string;
            };
            callFlowParams: {};
            callProcessingDetails: {
                CALLBACK_FAILED_COUNT: string;
                CALLBACK_TERMINATING_PARTY: string;
                EP_ID: string;
                QMgrName: string;
                QueueId: string;
                ROUTING_TYPE: string;
                ani: string;
                displayAni: string;
                checkAgentAvailability: string;
                dnis: string;
                fceRegisteredEvents: string;
                isParked: string;
                mohFileName: string;
                outdialParkEpId: string;
                outdialTransferToQueueEnabled: string;
                participantInviteTimeout: string;
                priority: string;
                queuedDestinationID: string;
                queuedTo: string;
                ronaTimeout: string;
                taskToBeSelfServiced: string;
                tenantId: string;
                virtualTeamName: string;
                vteamId: string;
                workflowId: string;
                workflowName: string;
            };
            contactDirection: {
                type: string;
            };
            createdTimestamp: number;
            currentVTeam: string;
            interactionId: string;
            isFcManaged: boolean;
            isTerminated: boolean;
            media: {
                "b3e1a0d9-339a-4823-bec2-795b571bebbd": {
                    holdTimestamp: null;
                    isHold: boolean;
                    mType: string;
                    mediaMgr: string;
                    mediaResourceId: string;
                    mediaType: string;
                    participants: string[];
                };
            };
            mediaChannel: string;
            mediaType: string;
            orgId: string;
            outboundType: string;
            owner: null;
            participants: {};
            predialParticipants: string[];
            previousVTeams: string[];
            queuedTimestamp: null;
            state: string;
            workflowManager: null;
        };
        interactionId: string;
        orgId: string;
        queueId: string;
        queueMgr: string;
        reason: string;
        reasonCode: number;
        terminatingParty: string;
        trackingId: string;
        type: string;
    };
    orgId: string;
    trackingId: string;
    type: string;
};
export declare const consultToAgent: Service.Aqm.Contact.AgentContact["data"];
export declare const consultConferencingEvent: any;
export declare const agentMonitorStateChangedEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const callEventParentIntrtn: Service.Aqm.Contact.AgentContact["data"];
export declare const chatEventApple: Service.Aqm.Contact.AgentContact["data"];
export declare const consultToCBTQueueTask: Service.Aqm.Contact.AgentContact["data"];
