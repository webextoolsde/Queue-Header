import { LayoutUserRoles } from "@/app/utils/DesktopLayoutUtils";
import { AgentStateSelector, Utility, WrapUp } from "@agentx/agentx-mfe-react-based";
import { UserStationLoginTypes } from "@agentx/agentx-mfe-wc-based";
import { Service } from "@agentx/agentx-services";
import { UserStore } from "@component-stores/UserStore/user-store";
import { CI } from "@uuip/unified-ui-platform";
export type EpDnList = Array<Service.Cms.EpDnListMap>;
export type organizationIdleCodes = {
    isFetchingSuccess: boolean;
    data: Service.Aqm.Configs.Entity[];
};
export declare class ModuleAgent extends UserStore {
    dnNumber: string;
    teamName: string;
    profileType: string;
    enterpriseId: string;
    privacyShieldVisible: string | boolean | undefined;
    agentName: string;
    agentEmailId: string;
    agentProfileID: string;
    isOutboundEnabledForTenant: boolean;
    isOutboundEnabledForAgent: boolean;
    isAdhocDialingEnabled: boolean;
    isAgentAvailableAfterOutdial: boolean;
    isCampaignManagementEnabled: boolean;
    campaignManagerAdditionalInfo: string;
    acqueonApiUrl: string;
    acqueonConsoleUrl: string;
    siteId: string;
    usesOtherDN: boolean;
    isExtension: boolean;
    isEndCallEnabled: boolean;
    isEndConsultEnabled: boolean;
    allowConsultToQueue: boolean;
    lcmUrl: string;
    teamUniqueId: string;
    dialPlan: Service.Aqm.Configs.DialPlan;
    outDialEp: string;
    agentPhoto: string | undefined;
    channelsStatesMap: Record<Service.Aqm.Configs.Channels, Service.Aqm.Configs.AgentChannelTypeStates>;
    subStatus: Service.Aqm.Agent.StateChange["state"];
    subStatusChangeTimestamp: Date;
    idleStatusTimestamp: Date;
    idleCodes: Service.Aqm.Configs.Entity[];
    agentStateIdleCodes: Service.Aqm.Configs.agentStateIdleCodes | null;
    systemIdleCodes: Service.Aqm.Configs.agentStateIdleCodes | null;
    agentDefaultWrapupCode: Service.Aqm.Configs.agentDefaultWrapupCode | undefined;
    agentWrapUpCodes: Service.Aqm.Configs.agentWrapUpCodes | undefined;
    wrapUpData: Service.Aqm.Configs.WrapupData;
    outDialAni: Service.Aqm.Agent.OutDialAniData;
    selectedOutdialANI: {
        id: string;
        name: string;
    };
    addressBook: Service.Aqm.Agent.AddressBooksData;
    cadVariables: Service.Aqm.Configs.CadVariables[];
    callVariablesSuppressed: Service.Aqm.Configs.CallVariablesSuppressed;
    agentAnalyzerId: string | undefined;
    userSelectedRole: string;
    isMonitoringEnabled: boolean;
    isMidCallMonitoringEnabled: boolean;
    isBargeInEnabled: boolean;
    isManagedTeamsEnabled: boolean;
    isSendMessageEnabled: boolean;
    isAgentStateChangeEnabled: boolean;
    isSignoutAgentsEnabled: boolean;
    isManagedQueuesEnabled: boolean;
    userRole: string[];
    organizationId: string;
    role: string;
    preferredSupervisorTeamId: string;
    defaultDn: string;
    isDefaultDnSet: boolean;
    extensionNumber: string;
    dialNumberValueForNonUS: string;
    isInternational: boolean;
    internationalPhoneNumber: string;
    countryCallingCode: string;
    countryCodeValue: string;
    isPreferenceSaved: boolean;
    isRememberMyCredentials: boolean;
    isRecordingManagementEnabled: boolean;
    lostConnectionRecoveryTimeout: number;
    managedTeams: Array<Service.Conf.Team>;
    managedQueues: Array<Service.Conf.Queue>;
    isTimeoutDesktopInactivityEnabled: boolean;
    timeoutDesktopInactivityMins: number | undefined;
    isAnalyzerEnabled: boolean;
    tenantTimezone: string | undefined;
    changedByName: string | null;
    webRtcStatus: string;
    presenceServiceStatus: {
        serviceStatus: string;
        trackingId: string;
    };
    lastStateChangeByPresence: boolean;
    idleCodesAccess: string;
    selectedChannelList: Service.Aqm.Configs.ChannelList;
    selectedTeamList: Service.Conf.Team[];
    selectedQueueList: Service.Conf.Queue[];
    isManagedTeamLoading: boolean;
    isManagedQueueLoading: boolean;
    isManagedTeamsError: boolean | string;
    isManagedQueuesError: boolean | string;
    organizationIdleCodes: organizationIdleCodes;
    selectedInputDeviceId: string;
    selectedOutputDeviceId: string;
    dtmfValue: string;
    selectedOutputVolume: any;
    speakerMute: any;
    loginVoiceOptions: Service.Conf.LoginOption[];
    deviceType: Service.Aqm.Agent.DeviceType | null;
    mediaPermission: PermissionState;
    isEmergencyModalAlreadyDisplayed: boolean | undefined;
    epDnMapping: any;
    displayMicrosoftUserDetails: boolean;
    displayWebexUserDetails: boolean;
    stateSynchronization: boolean;
    collabToolInSync: string;
    signOutByUi: boolean;
    signOutByProfileChange: boolean;
    availableExtensions: string[];
    constructor();
    get areDigitalChannelsEnabled(): boolean;
    get canManuallyAssignDigitalTasks(): boolean;
    get collaboration(): {
        collabToolInSync: string;
        displayUserDetails: boolean;
        displayMicrosoftUserDetails: boolean;
        displayWebexUserDetails: boolean;
        stateSynchronization: boolean;
    };
    get analyzerInteractionFilter(): any;
    get analyzerQueueStatsFilter(): any;
    get getAgentStateProps(): any;
    get getGranularAgentStateProps(): Service.Aqm.Configs.GranularAgentStateProps;
    get getAgentWrapUpCodeProps(): any;
    get getEpDnMapping(): any;
    get getAddressBook(): Service.Aqm.Agent.AddressBooksData;
    get getAcqueonTeamId(): string;
    get getOutDialAni(): Service.Aqm.Agent.OutDialAniData;
    get outdialAniList(): Service.Aqm.Agent.OutdialAni[];
    get getOutdialRegex(): string;
    get getUserRole(): LayoutUserRoles;
    get getMCMEnabled(): boolean;
    get getRecordingManagementEnabled(): boolean;
    get getMicrophoneAccessDenied(): boolean;
    get getMediaDeviceSetting(): any;
    get imiConfigs(): Utility.AgentConfigs;
    changeStateWithDefaultIdleObject(idleCode: Service.Aqm.Configs.DefaultAuxCodes, state: string, lastStateChangeReason?: string): void;
    fetchDefaultIdleCodes: (orgId: string) => Promise<Service.Aqm.Configs.DefaultAuxCodes>;
    changeAgentState(state: string): Promise<void>;
    private readonly getIdleCodesForInfiniteScroll;
    private makeStateChange;
    get getAgentData(): {
        orgId: string;
        teamId: string;
        agentId: string;
        selectedLanguage: string;
    };
    get isSupervisorySendMessageEnabled(): boolean;
    get isStateChangeBySupervisorEnabled(): boolean;
    get isSignoutBySupervisorEnabled(): boolean;
    get tpwConfigs(): any;
    get acqueonAgentId(): string;
    get getIsMaskSensitiveDataEnabled(): boolean;
    updateStatusAfterRONA(newState: string): void;
    updateSubStatus(subStatus: Service.Aqm.Agent.StateChange["state"], lastStateChangeTimestamp: number, lastIdleCodeChangeTimestamp: number): void;
    updateStateByPresence(auxCodeId: string, state: string): Promise<void>;
    updateLastStateChangeByPresence(flag: boolean): void;
    updateTeamName(teamName: string): void;
    updateTeamId(teamId: string): void;
    updateTeamUniqueId(teamId: string): void;
    updateChangeByName(supervisorName: string | null): void;
    updateSelectedAgentRole(selectedRoleName: string): void;
    updateDnNumber(dnNumber: string): void;
    updateUsesOtherDN(usesOtherDN: boolean): void;
    updateIsExtension(isExtension: boolean): void;
    updateDefaultDN(defaultDn: string): void;
    updateExtensionNumber(extensionNumber: string): void;
    updateDialNumberValueForNonUS(dialNumberValueForNonUS: string): void;
    updateIsInternational(isInternational: boolean): void;
    updateInternationalPhoneNumber(internationalPhoneNumber: string): void;
    updateCountryCallingCode(countryCallingCode: string): void;
    updateCountryCodeValue(countryCodeValue: string): void;
    updateIsPreferenceSaved(isPrefSaved: boolean): void;
    updateIsPreferenceSavedFailed(isPrefSaved: boolean): void;
    updateIsRememberMyCredentials(isRememberMyCredentials: boolean): void;
    updateDeviceType(deviceType: Service.Aqm.Agent.DeviceType | null): void;
    updateEmergencyModalDisplay(isEmergencyModalAlreadyDisplayed?: boolean | undefined): void;
    updateSelectedInputDeviceId(selectedInputDeviceId: string): void;
    updateSelectedOutputDeviceId(selectedOutputDeviceId: string): void;
    updateMediaSettings(settings: any): void;
    updateMediaPermission(status: PermissionState): void;
    updateChannelCapacity(mmProfile: Record<string, string[]>): void;
    updateChannelsStatesMap(channelsStatesMap: Service.Aqm.Configs.GranularAgentStateProps["channelsStatesMap"]): void;
    updateSpecificChannelState(channel: Service.Aqm.Configs.Channels, state: Service.Aqm.Configs.AgentChannelTypeStates): void;
    updateProfileType(profileType: string): void;
    updateAgentId(agentId: string): void;
    updateAvailableExtensions(extensions: string[]): void;
    updateAgentProfileLogin(detail: UserStationLoginTypes.ESuccess["detail"]): void;
    updateInitialConfiguration(profile: Service.Conf.Profile): void;
    updateStatusAfterOutdial(e: WrapUp.EWrapupEvent): void;
    updateStatusAfterProfileUpdate(): void;
    updateStateToRona(): void;
    updateoutdialAniList(resp: Service.Aqm.Agent.OutdialAniListSuccess): void;
    updateSelectedOutdialANI(ani: Service.Aqm.Agent.OutdialAni): void;
    updateoutdialAniListFailed(): void;
    updateAgentStateIdleCodes(resp: Service.Aqm.Configs.agentStateIdleCodes): void;
    updateSystemIdleCodes(resp: Service.Aqm.Configs.agentStateIdleCodes): void;
    updateAgentWrapUpCodes(resp: Service.Aqm.Configs.agentWrapUpCodes): void;
    updateWrapupList(wrapupReasonList: []): void;
    updateAddressbookList(addressBookData: Service.Aqm.Agent.AddressBooks): void;
    updateAddressbookListFailed(resp: any): void;
    updateSelectedChannelList(selectedChannelList: Service.Aqm.Configs.ChannelList): void;
    updateSelectedTeamList(selectedTeamList: Service.Conf.Team[]): void;
    updateSelectedQueueList(selectedQueueList: Service.Conf.Queue[]): void;
    updateDtmfValue(dtmfValue: string): void;
    selectState(e: AgentStateSelector.EventSelected): Promise<void>;
    updateAgentMe(meData: CI.User): void;
    setRole(role: string, meData: CI.User, orgDetails: {
        orgId: string;
        role: string;
    }): void;
    setUserProfileInfo(role: string, agentPhoto: string, organizationId: string, meUserId: string): void;
    updateAgentAnalyzerId(userId: string): void;
    updateUserRole(userRole: string[]): void;
    updateWebRtcStatus(status: string): void;
    updateEpDnList(data: Array<Service.Cms.EpDnListMap>): void;
    updatetrackingIdforEpList(errorObj: any): void;
    updateManagedTeams(managedTeamsData: Array<Service.Conf.Team>): void;
    updateManagedQueues(managedQueuesData: Array<Service.Conf.Queue>): void;
    updateIsManagedTeamLoading(status: boolean): void;
    updateIsManagedQueueLoading(status: boolean): void;
    updateIsManagedTeamEnabled(status: boolean): void;
    updateIsManagedQueueEnabled(status: boolean): void;
    updateIsManagedTeamError(status: boolean | string): void;
    updateIsManagedQueueError(status: boolean | string): void;
    updateOrganizationIdleCodes(isFetchingSuccess: boolean, data: Service.Aqm.Configs.Entity[]): void;
    updatePresenceServiceStatus(serviceStatus: string, trackingId: any): void;
    updateDisplayMicrosoftUserDetailsEnabled(status: boolean): void;
    updateDisplayWebexUserDetailsEnabled(status: boolean): void;
    updateStateSyncEnabled(status: boolean): void;
    updateCollabToolInSync(toolName: string): void;
    updateSignOutByUi(isSignedOut: boolean): void;
    updateSignOutByChangeProfile(isSignedOut: boolean): void;
    updateIdleCodesList(idleCodesList: []): void;
}
declare module "@/store" {
    namespace Store.Agent { }
}
export declare const agent: ModuleAgent;
/**
 * @typedef  {Object} agent
 * @summary $STORE.agent
 * @property {String} dnNumber="" Dial Number
 * @property {String} teamName="" Name of the team.
 * @property {String} profileType="" Profile Type
 * @property {String} enterpriseId="" Unique Database Identifier of the tenant.
 * @property {String} agentName="" Name of the agent.
 * @property {String} agentId="" Unique identifier of the agent.
 * @property {String} agentEmailId="" Email ID of the agent.
 * @property {Boolean} isOutboundEnabledForTenant=false Determines whether the outbound feature is enabled for the tenant.
 * @property {Boolean} isOutboundEnabledForAgent=false Determines whether the outbound feature is enabled for the agent.
 * @property {Boolean} isAdhocDialingEnabled=false Determines whether agent can use numbers other than the ones mentioned in address book for the outdial.
 * @property {Boolean} isAgentAvailableAfterOutdial=false Determines whether the agent is available after the outdial.
 * @property {Boolean} isCampaignManagementEnabled=false Determines whether the campaign management enabled.
 * @property {String} campaignManagerAdditionalInfo="" Additional information for the campaign management.
 * @property {String} siteId="" Unique Identifier for the site.
 * @property {String} orgId="" Unique Identifier for the organization.
 * @property {Boolean} usesOtherDN=false Other Dial Number (Non-US Format).
 * @property {Boolean} isEndCallEnabled=false Determines whether the end call feature is enabled.
 * @property {Boolean} isEndConsultEnabled=true Determines whether the end consult call feature is enabled.
 * @property {Boolean} allowConsultToQueue=false Determines whether consult can go to queue.
 * @property {String} teamId="" Unique identifier of the team.
 * @property {String} outDialEp="" Outdial Entry Point
 * @property {String} changedByName="" supervisor who changed agent state.
 * @property {(String|Undefined)} agentPhoto URL for the photo of the agent in JPG format.
 * @property {Object} channels Channels: Includes voice, chat, email, and social
 * @property {Number} channels.voiceCount=0 Channel - Voice Count
 * @property {Number} channels.chatCount=0 Channel - Chat Count
 * @property {Number} channels.emailCount=0 Channel - Email Count
 * @property {Number} channels.socialCount=0 Channel - Social Count
 * @property {Service_Aqm_Agent_StateChange} subStatus="" Agent availability status.
 * The possible values for sub status can be Available, Idle, or RONA [Service.Aqm.Agent.StateChange["state"]]
 * @property {Date} subStatusChangeTimestamp Timestamp for change in the agent state.
 * @property {Date} idleStatusTimestamp Timestamp for idle status.
 * @property {Service_Aqm_Configs_Entity} idleCodes=[]] The idle reason codes indicating that the agent is not ready to accept any routed requests.
 * Example: Idle, Coffee break, Meeting, Tea. [Service.Aqm.Configs.Entity]
 * @property {Service_Aqm_Configs_WrapupData} wrapUpData Wrap up data. [Service.Aqm.Configs.WrapupData]
 * @property {Service_Aqm_Agent_OutdialAni} outDialAni.data=[]] Outdial ANI List. [Service.Aqm.Agent.OutdialAni]
 * @property {String} userSelectedRole="" Name of Selected UserRole
 * @property {String} isMonitoringEnabled=false Monitoring flag for user
 * @property {String} isMidCallMonitoringEnabled=false Mid call Monitoring flag for user
 * @property {boolean} isTimeoutDesktopInactivityEnabled = false determines whether the inactivity timeout feature is enabled.
 * @property {number} timeoutDesktopInactivityMins = 0 determines the timeout interval in minutes for inactivity
 * @property {boolean} isAnalyzerEnabled = false determines whether the supervisor has access to analyzer or not.
 * @property {boolean} isManagedQueuesError false determines the no error. If we have a error then will store the trackingId.
 * @property {boolean} isManagedTeamsError false determines the no error. If we have a error then will store the trackingId.
 * @property {String[]} loginVoiceOptions= DEFAULT_LOGIN_VOICE_OPTIONS Agent Login Voice options. AGENT_DN | EXTENSION | BROWSER
 * @property {String} deviceType = AGENT_DN Agent Device Selection
 * @property {String} mediaPermission = "denied" Microphone Access Status "granted" | "denied" | "prompt"
 * @property {boolean} isRecordingManagementEnabled=false Manage Recordings flag for user
 */
