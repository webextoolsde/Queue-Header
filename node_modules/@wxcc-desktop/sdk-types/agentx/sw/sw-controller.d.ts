export declare namespace AgentXServiceWorker {
    export enum MessageEventDataAction {
        SkipWaiting = "skipWaiting"
    }
    type Listeners = {
        AGENTX_SW_UPDATE_PENDING: () => void;
        AGENTX_SW_ASK_INSTALL: () => void;
        AGENTX_SW_DISMISS_INSTALL: () => void;
    };
    export type Events = keyof Listeners;
    export class Controller {
        private readonly emitter;
        private is_update_pending;
        private is_inited;
        private is_refreshing;
        private deferredInstallPromptEvent;
        private currWorker;
        private nextWorker;
        private currVersion;
        private nextVersion;
        private bindSwUpdateFlow;
        deleteOldCache: () => Promise<(boolean | void)[]>;
        private notifyPendingUpdate;
        private onControllerChangeHandler;
        private onBeforeInstallPromptHandler;
        private bindSwBrowserEvents;
        private unbindSwBrowserEvents;
        init(): void;
        reload(): void;
        installConfirm(): void;
        installDismiss(): void;
        get isUpdatePending(): boolean;
        get isInstallPending(): boolean;
        private emit;
        addEventListener<T extends Events>(eventName: T, listener: Listeners[T]): void;
        removeEventListener<T extends Events>(eventName: T, listener: Listeners[T]): void;
    }
    export {};
}
declare const AGENTX_SW_CONTROLLER: AgentXServiceWorker.Controller;
export default AGENTX_SW_CONTROLLER;
