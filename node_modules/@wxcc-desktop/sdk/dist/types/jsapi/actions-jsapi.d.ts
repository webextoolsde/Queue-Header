import type { AgentContactSharedActions, GeneralNotificationsSharedActions } from "@wxcc-desktop/sdk-types";
import { AgentxService } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from './common/_service-checker';
type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
};
export declare class ActionsJsApi {
    private readonly logger;
    private readonly serviceChecker;
    private SERVICE?;
    private sourceActionsChannels;
    private destinationActionsChannels;
    private checkService;
    private lastReqTs;
    private lastReqN;
    private getNextReqId;
    constructor(config: Config);
    init(SERVICE?: AgentxService): void;
    cleanup(): void;
    fireGeneralSilentNotification(...args: GeneralNotificationsSharedActions.FireSilent.ReqPayloadParameters): void;
    fireGeneralAutoDismissNotification(...args: GeneralNotificationsSharedActions.FireAutoDismiss.ReqPayloadParameters): Promise<GeneralNotificationsSharedActions.FireAutoDismiss.ResPayloadParameters | undefined>;
    fireGeneralAcknowledgeNotification(...args: GeneralNotificationsSharedActions.FireAcknowledge.ReqPayloadParameters): Promise<GeneralNotificationsSharedActions.FireAcknowledge.ResPayloadParameters | undefined>;
    addCustomTask(...args: AgentContactSharedActions.AddCustomContact.ReqPayloadParameters): void;
    getTaskMap(): Promise<any>;
    getMediaTypeQueue(mediaType: string): Promise<any>;
    getToken(): Promise<string | undefined>;
    getIdleCodes(): Promise<import("@agentx/agentx-services").Service.Aqm.Configs.Entity[] | undefined>;
    getWrapUpCodes(): Promise<import("@agentx/agentx-services").Service.Aqm.Configs.WrapUpReason[] | undefined>;
    getClosestElement(el: any, selector: string): HTMLElement | null;
    toggleMiximizeRestore: (e: MouseEvent | KeyboardEvent) => void;
    toggleVoiceInteractionPanel: () => void;
    toggleMuteUnmuteWebRtcCall: () => void;
    declineWebRtcCall: () => void;
    acceptWebRtcCall: () => void;
}
export declare const createActionsJsApi: () => ActionsJsApi;
export {};
