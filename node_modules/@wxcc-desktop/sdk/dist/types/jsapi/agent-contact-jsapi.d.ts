import { AgentxService } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from "./common/_service-checker";
import { AqmServiceEntityEvents } from "./common/_service-events";
import { Service } from "@wxcc-desktop/sdk-types";
type Listeners = {
    eAgentContact: Parameters<AgentxService["aqm"]["contact"]["eAgentContact"]["listen"]>[0];
    eAgentContactAssigned: Parameters<AgentxService["aqm"]["contact"]["eAgentContactAssigned"]["listen"]>[0];
    eAgentContactEnded: Parameters<AgentxService["aqm"]["contact"]["eAgentContactEnded"]["listen"]>[0];
    eAgentContactWrappedUp: Parameters<AgentxService["aqm"]["contact"]["eAgentContactWrappedUp"]["listen"]>[0];
    eAgentOfferContact: Parameters<AgentxService["aqm"]["contact"]["eAgentOfferContact"]["listen"]>[0];
    eAgentOfferContactRona: Parameters<AgentxService["aqm"]["contact"]["eAgentOfferContactRona"]["listen"]>[0];
    eAgentOfferConsult: Parameters<AgentxService["aqm"]["contact"]["eAgentOfferConsult"]["listen"]>[0];
    eAgentWrapup: Parameters<AgentxService["aqm"]["contact"]["eAgentWrapup"]["listen"]>[0];
    eAgentContactHeld: Parameters<AgentxService["aqm"]["contact"]["eAgentContactHeld"]["listen"]>[0];
    eAgentContactUnHeld: Parameters<AgentxService["aqm"]["contact"]["eAgentContactUnHeld"]["listen"]>[0];
    eCallRecordingStarted: Parameters<AgentxService["aqm"]["contact"]["eCallRecordingStarted"]["listen"]>[0];
    eAgentConsultCreated: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultCreated"]["listen"]>[0];
    eAgentConsultConferenced: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultConferenced"]["listen"]>[0];
    eAgentConsultEnded: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultEnded"]["listen"]>[0];
    eAgentCtqCancelled: Parameters<AgentxService["aqm"]["contact"]["eAgentCtqCancelled"]["listen"]>[0];
    eAgentConsulting: Parameters<AgentxService["aqm"]["contact"]["eAgentConsulting"]["listen"]>[0];
    eAgentConsultFailed: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultFailed"]["listen"]>[0];
    eAgentConsultEndFailed: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultEndFailed"]["listen"]>[0];
    eAgentCtqFailed: Parameters<AgentxService["aqm"]["contact"]["eAgentCtqFailed"]["listen"]>[0];
    eAgentCtqCancelFailed: Parameters<AgentxService["aqm"]["contact"]["eAgentCtqCancelFailed"]["listen"]>[0];
    eAgentConsultConferenceEndFailed: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultConferenceEndFailed"]["listen"]>[0];
    eAgentMonitorStateChanged: Parameters<AgentxService["aqm"]["supervisor"]["eAgentMonitorStateChanged"]["listen"]>[0];
    eAgentMonitoringEnded: Parameters<AgentxService["aqm"]["supervisor"]["eAgentMonitoringEnded"]["listen"]>[0];
    eAgentOfferCampaignReserved: Parameters<AgentxService["aqm"]["contact"]["eAgentOfferCampaignReserved"]["listen"]>[0];
    eAgentAddCampaignReserved: Parameters<AgentxService["aqm"]["contact"]["eAgentAddCampaignReserved"]["listen"]>[0];
    eAgentCampaignContactUpdated: Parameters<AgentxService["aqm"]["contact"]["eAgentCampaignContactUpdated"]["listen"]>[0];
    eContactOwnerChanged: Parameters<AgentxService["aqm"]["contact"]["eContactOwnerChanged"]["listen"]>[0];
    eParticipantJoinedConference: Parameters<AgentxService["aqm"]["contact"]["eParticipantJoinedConference"]["listen"]>[0];
    eParticipantLeftConference: Parameters<AgentxService["aqm"]["contact"]["eParticipantLeftConference"]["listen"]>[0];
    eAgentConferenceTransferred: Parameters<AgentxService["aqm"]["contact"]["eAgentConferenceTransferred"]["listen"]>[0];
    eAgentConsultConferencing: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultConferencing"]["listen"]>[0];
    eAgentConsultTransferring: Parameters<AgentxService["aqm"]["contact"]["eAgentConsultTransferring"]["listen"]>[0];
};
type AqmContactEvents = AqmServiceEntityEvents<Listeners>;
type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
    aqmEvents: AqmContactEvents;
};
export declare class AgentContactJsApi {
    private readonly logger;
    private readonly serviceChecker;
    private readonly aqmEvents;
    private SERVICE?;
    private checkService;
    constructor(config: Config);
    init(SERVICE?: AgentxService): void;
    cleanup(): void;
    sendDtmf(digit: any): void;
    accept(p: {
        interactionId: string;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    consultAccept(p: {
        interactionId: string;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    buddyAgents(p: {
        data: Service.Aqm.Contact.BuddyAgents;
    }): Promise<Service.Aqm.Contact.BuddyAgentsSuccess | undefined>;
    end(p: {
        interactionId: string;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    consultEnd(p: {
        interactionId: string;
        isConsult: boolean;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    cancelCtq(p: {
        interactionId: string;
        data: Service.Aqm.Contact.cancelCtq;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    wrapup(p: {
        interactionId: string;
        data: Service.Aqm.Contact.WrapupPayLoad;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    vteamTransfer(p: {
        interactionId: string;
        data: Service.Aqm.Contact.vteamTransferPayLoad;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    blindTransfer(p: {
        interactionId: string;
        data: Service.Aqm.Contact.blindTransferPayLoad;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    hold(p: {
        interactionId: string;
        isPostCallConsult: boolean;
        data: {
            mediaResourceId: string;
        };
    }): Promise<{} | undefined>;
    unHold(p: {
        interactionId: string;
        isPostCallConsult: boolean;
        data: {
            mediaResourceId: string;
        };
    }): Promise<{} | undefined>;
    consult(p: {
        interactionId: string;
        data: Service.Aqm.Contact.ConsultPayload | Service.Aqm.Contact.ConsultDN | Service.Aqm.Contact.ConsultAgent | Service.Aqm.Contact.ConsultQueue;
        url: string;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    consultConference(p: {
        interactionId: string;
        data: Service.Aqm.Contact.ConsultPayload;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    decline(p: {
        interactionId: string;
        data: {
            mediaResourceId: string;
        };
        isConsult: boolean;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    consultTransfer(p: {
        interactionId: string;
        data: Service.Aqm.Contact.consultTransferPayLoad;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    vteamList(p: {
        data: Service.Aqm.Contact.VTeam;
    }): Promise<Service.Aqm.Contact.VTeamSuccess | undefined>;
    pauseRecording(p: {
        interactionId: string;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    resumeRecording(p: {
        interactionId: string;
        data: {
            autoResumed: boolean;
        };
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    acceptV2(p: {
        interactionId: string;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    endV2(p: {
        interactionId: string;
        isEndingFromNonPrimary?: boolean;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    cancelTaskV2(p: {
        interactionId: string;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    pauseRecordingV2(p: {
        interactionId: string;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    resumeRecordingV2(p: {
        interactionId: string;
        data: {
            autoResumed: boolean;
        };
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    wrapupV2(p: {
        interactionId: string;
        data: Service.Aqm.Contact.WrapupV2PayLoad;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    consultV2(p: {
        interactionId: string;
        data: Service.Aqm.Contact.consultDataV2;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    consultEndV2(p: {
        interactionId: string;
        isConsult: boolean;
        isSecondaryEpDnAgent?: boolean;
        queueId?: string;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    consultConferenceV2(p: {
        interactionId: string;
        data: Service.Aqm.Contact.consultConferenceDataV2;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    exitConference(p: {
        interactionId: string;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    consultTransferV2(p: {
        interactionId: string;
        data: Service.Aqm.Contact.transferV2Payload;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    blindTransferV2(p: {
        interactionId: string;
        data: Service.Aqm.Contact.transferV2Payload;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    vteamTransferV2(p: {
        interactionId: string;
        data: Service.Aqm.Contact.transferV2Payload;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    buddyAgentsV2(p: {
        data: Service.Aqm.Contact.BuddyAgentsV2;
    }): Promise<Service.Aqm.Contact.BuddyAgentsSuccess | undefined>;
    addEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    addOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeAllEventListeners(): void;
}
export declare const createAgentContactJsApi: () => AgentContactJsApi;
export {};
