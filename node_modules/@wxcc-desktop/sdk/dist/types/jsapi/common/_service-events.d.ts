import { AgentxService } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./_logger";
type AqmServiceEntities = AgentxService["aqm"]["agent"] | AgentxService["aqm"]["configs"] | AgentxService["aqm"]["contact"] | AgentxService["aqm"]["dialer"] | AgentxService["aqm"]["supervisor"] | AgentxService["aqm"]["screenpop"] | AgentxService["aqm"]["aiAssistant"];
type Events<Listeners> = keyof Listeners;
type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
};
type InitConfig = {
    aqmServiceEntity: AqmServiceEntities;
    aqmServiceEntityString: string;
};
export declare class AqmServiceEntityEvents<Listeners> {
    private readonly logger;
    private aqmServiceEntity?;
    private aqmServiceEntityString?;
    isInited: boolean;
    constructor(config: Config);
    init(config: InitConfig): void;
    cleanup(): void;
    private listeners;
    private listenersOnce;
    private _addEventListener;
    private _removeEventListener;
    addEventListener<T extends Events<Listeners>>(eventName: T, listener: Listeners[T]): void;
    addOnceEventListener<T extends Events<Listeners>>(eventName: T, listener: Listeners[T]): void;
    removeEventListener<T extends Events<Listeners>>(eventName: T, listener: Listeners[T]): void;
    removeOnceEventListener<T extends Events<Listeners>>(eventName: T, listener: Listeners[T]): void;
    removeAllEventListeners(): void;
}
export declare const createServiceEvents: <Listeners>(config: Config) => AqmServiceEntityEvents<Listeners>;
export {};
