import { AgentxService, Service } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from "./common/_service-checker";
import { AqmServiceEntityEvents } from "./common/_service-events";
type Listeners = {
    eOutdialFailed: Parameters<AgentxService["aqm"]["dialer"]["eOutdialFailed"]["listen"]>[0];
    eCampaignPreviewAcceptFailed: Parameters<AgentxService["aqm"]["dialer"]["eCampaignPreviewAcceptFailed"]["listen"]>[0];
    eCampaignPreviewSkipFailed: Parameters<AgentxService["aqm"]["dialer"]["eCampaignPreviewSkipFailed"]["listen"]>[0];
    eCampaignPreviewRemoveFailed: Parameters<AgentxService["aqm"]["dialer"]["eCampaignPreviewRemoveFailed"]["listen"]>[0];
};
type AqmDialerEvents = AqmServiceEntityEvents<Listeners>;
type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
    aqmEvents: AqmDialerEvents;
};
export declare class DialerJsApi {
    private readonly logger;
    private readonly serviceChecker;
    private readonly aqmEvents;
    private SERVICE?;
    private checkService;
    constructor(config: Config);
    init(SERVICE?: AgentxService): void;
    cleanup(): void;
    startOutdial(p: {
        data: Service.Aqm.Dialer.tasks;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    previewCampaignAccept(p: {
        data: Service.Aqm.Dialer.previewContact;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    previewCampaignSkip(p: {
        data: Service.Aqm.Dialer.previewContact;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    removePreviewContact(p: {
        data: Service.Aqm.Dialer.previewContact;
    }): Promise<Service.Aqm.Contact.AgentContact | undefined>;
    updateCadVariables(p: {
        interactionId: string;
        data: Service.Aqm.Dialer.updateCadPayLoad;
        secureCad?: Array<string>;
        keyId: string | null;
        keyVersion: number | null;
    }): Promise<any>;
    addEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    addOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeAllEventListeners(): void;
}
export declare const createDialerJsApi: () => DialerJsApi;
export {};
