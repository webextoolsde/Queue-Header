import { I18N } from "@uuip/unified-ui-platform-sdk";
import { AgentxService } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from "./common/_service-checker";
type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
};
export declare class I18NJsApi {
    private readonly logger;
    private readonly serviceChecker;
    private SERVICE?;
    private checkService;
    constructor(config: Config);
    init(SERVICE?: AgentxService): void;
    cleanup(): void;
    createInstance(createServiceOptions?: I18N.CreateServiceOptions): import("i18next").i18n;
    createMixin(createMixinOptions: I18N.CreateMixinOptions): <T extends new (...args: any[]) => HTMLElement & I18N.UpdatingElement>(baseElement: T) => T & (new (...args: any[]) => I18N.I18nElement);
    get DEFAULT_INIT_OPTIONS(): import("i18next").InitOptions | undefined;
    getMergedInitOptions(...initOptions: I18N.InitOptions[]): import("i18next").InitOptions;
}
export declare const createI18NJsApi: () => I18NJsApi;
export {};
