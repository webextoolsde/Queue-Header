import { AgentxService } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from "./common/_service-checker";
import { AqmServiceEntityEvents } from "./common/_service-events";
type Listeners = {
    eScreenPop: Parameters<AgentxService["aqm"]["screenpop"]["eScreenPop"]["listen"]>[0];
};
type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    aqmEvents: AqmServiceEntityEvents<Listeners>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
};
export declare class ScreenPopJsApi {
    private readonly logger;
    private readonly serviceChecker;
    private readonly aqmEvents;
    private SERVICE?;
    private checkService;
    constructor(config: Config);
    init(SERVICE?: AgentxService): void;
    cleanup(): void;
    addEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    addOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeOnceEventListener<T extends keyof Listeners>(eventName: T, listener: Listeners[T]): void;
    removeAllEventListeners(): void;
}
export declare const createScreenPopJsApi: () => ScreenPopJsApi;
export {};
