import { AgentxService } from "@wxcc-desktop/sdk-types";
import { createJsApiLogger } from "./common/_logger";
import { createServiceChecker } from "./common/_service-checker";
type Config = {
    logger: ReturnType<typeof createJsApiLogger>;
    serviceChecker: ReturnType<typeof createServiceChecker>;
};
export declare class ShortcutKeyJsApi {
    private readonly logger;
    private readonly serviceChecker;
    private SERVICE?;
    private checkService;
    constructor(config: Config);
    init(SERVICE?: AgentxService): void;
    cleanup(): void;
    listenKeyPress(...args: Parameters<AgentxService["shortcut"]["event"]["listenKeyPress"]>): void;
    listenKeyConflict(...args: Parameters<AgentxService["shortcut"]["event"]["listenKeyConflict"]>): void;
    listenConflictResolved(...args: Parameters<AgentxService["shortcut"]["event"]["listenConflictResolved"]>): void;
    register(...args: Parameters<AgentxService["shortcut"]["register"]>): void;
    unregisterKeys(...args: Parameters<AgentxService["shortcut"]["unregisterKeys"]>): void;
    getRegisteredKeys(): Map<string, import("@wxcc-desktop/sdk-types").Service.shortcut.KeyInfo> | undefined;
    get DEFAULT_SHORTCUT_KEYS(): {
        [key: string]: import("@wxcc-desktop/sdk-types").Service.shortcut.KeyInfo[];
    } | undefined;
    get MODIFIERS(): {
        CTRL_SHIFT: string;
        ALT_SHIFT: string;
        CTRL_ALT: string;
        SHIFT: string;
        CTRL: string;
        ALT: string;
    } | undefined;
    get REGISTERED_KEYS(): {
        EXPAND_COLLAPSE_INTERACTION_PANEL_KEY: string;
        SAVE_EDITED_CAD_KEY: string;
        REVERT_EDITED_CAD_KEY: string;
        HOLD_RESUME_CALL_KEY: string;
        TRANSFER_KEY: string;
        CONSULT_KEY: string;
        END_KEY: string;
        CONFERENCE_KEY: string;
        PAUSE_RESUME_RECORDING_KEY: string;
        GO_TO_AVAILABLE_KEY: string;
        OPEN_STATE_SELECTOR_KEY: string;
        SEND_EMAIL_KEY: string;
        REPLY_EMAIL_KEY: string;
        REPLY_ALL_EMAIL_KEY: string;
        OPEN_USER_PROFILE_KEY: string;
        ENABLE_SILENT_NOTIFICATION_KEY: string;
        OPEN_SHORTCUT_KEY_MODAL_KEY: string;
        DOWNLOAD_ERROR_REPORT_KEY: string;
        SIGNOUT_KEY: string;
        ACCEPT_TASK_KEY: string;
        SWITCH_POPOVER_KEY: string;
        EXPAND_COLLAPSE_POPOVER_KEY: string;
        OPEN_OUTDIAL_KEY: string;
        OPEN_WRAP_UP_KEY: string;
        EXPAND_COLLAPSE_TASK_LIST_PANEL_KEY: string;
        OPEN_NOTIFICATION_CENTER_KEY: string;
        OPEN_NAVIGATION_TAB_KEY: string;
        REFRESH_KEY: string;
        SWITCH_TASK_KEY: string;
        ACCEPT_ALL_TASK_KEY: string;
        EXPAND_COLLAPSE_WEBEX: string;
        MINIMIZE_RESTORE_WEBEX: string;
        OPEN_DTMF_KEYPAD: string;
    } | undefined;
}
export declare const createShortcutKeyJsApi: () => ShortcutKeyJsApi;
export {};
